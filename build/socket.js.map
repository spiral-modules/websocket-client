{"version":3,"sources":["webpack://SFSocket/webpack/universalModuleDefinition","webpack://SFSocket/webpack/bootstrap","webpack://SFSocket/./lib/eventdispatcher/events.ts","webpack://SFSocket/./lib/Channel.ts","webpack://SFSocket/./lib/eventdispatcher/CallbackRegistry.ts","webpack://SFSocket/./lib/eventdispatcher/EventsDispatcher.ts","webpack://SFSocket/./lib/messageCodingUtils.ts","webpack://SFSocket/./lib/connection/Connection.ts","webpack://SFSocket/./lib/transport/TransportConnection.ts","webpack://SFSocket/./lib/transport/Transport.ts","webpack://SFSocket/./lib/connection/ConnectionManager.ts","webpack://SFSocket/./lib/constants.ts","webpack://SFSocket/./lib/SFSocket.ts","webpack://SFSocket/./lib/index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","NamesDict","ChannelStatus","socket","channelStatus","CLOSED","this","cMgr","enabled","DISCONNECTED","CHANNEL_JOIN_FAILED","channels","indexOf","CHANNEL_JOINED","JOINED","CHANNEL_LEFT","CONNECTED","sendJoinCommand","isConnected","JOINING","sendJoin","eventName","callback","unbind","LEAVING","sendLeave","CallbackRegistry","callbacks","channel","push","fn","names","keys","removeCallback","removeAllCallbacks","forEach","filter","existedCallback","isEqualCallback","isEqualChannel","add","remove","event","channelEvent","variableToCheck","context","length","isChannelCallback","SystemEvents","SystemTopics","Set","CHANNEL_LEAVE_FAILED","encodeMessage","sfEvent","topic","type","payload","JSON","stringify","ConnectionCommands","SystemCommands","JOIN","LEAVE","id","transport","super","bindListeners","data","send","commandName","has","Error","close","unbindListeners","listeners","MESSAGE","message","ERROR","error","closed","messageEvent","sfSocketEvent","messageData","parse","Array","isArray","SFSocketEventType","decodeMessage","e","emit","closeEvent","code","handleCloseEvent","action","console","prepareCloseAction","hooks","initialize","self","isInitialized","changeState","INITIALIZED","onClose","state","url","getSocket","setTimeout","onError","onClosed","CONNECTING","onopen","onerror","onclose","onmessage","OPEN","wasClean","reason","undefined","onOpen","onMessage","log","params","options","scheme","useTLS","host","port","paramStr","queryParams","entries","map","encodeURIComponent","join","path","WebSocket","socketUrl","connected","onInitialized","connect","result","abort","connection","errorCallbacks","buildErrorCallbacks","connectionCallbacks","buildConnectionCallbacks","runner","unavailableTimer","retryTimer","updateState","startConnecting","setUnavailableTimer","sendCommand","disconnectInternally","abortConnecting","clearUnavailableTimer","setConnection","clearRetryTimer","abandonConnection","delay","String","Math","round","clearTimeout","UNAVAILABLE","unavailableTimeout","socketEvent","errorEvent","shouldRetry","retryIn","channelJoined","channelJoinFailed","channelLeft","withErrorEmitted","refused","disconnect","unavailable","newState","previousState","defaultConfig","constructorOptions","config","values","err","instances","isReady","instance","cmdName","channelsNames","channelsName","joinChannel","channelNames","channelName","leaveChannel","chanelName","leave","makeSocketOptions","wsUrl","URL","urlProtocol","protocol","replace","hostname"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAkB,SAAID,IAEtBD,EAAe,SAAIC,IARrB,CASGK,QAAQ,WACX,O,YCTE,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUP,QAGnC,IAAIC,EAASI,EAAiBE,GAAY,CACzCC,EAAGD,EACHE,GAAG,EACHT,QAAS,IAUV,OANAU,EAAQH,GAAUI,KAAKV,EAAOD,QAASC,EAAQA,EAAOD,QAASM,GAG/DL,EAAOQ,GAAI,EAGJR,EAAOD,QA0Df,OArDAM,EAAoBM,EAAIF,EAGxBJ,EAAoBO,EAAIR,EAGxBC,EAAoBQ,EAAI,SAASd,EAASe,EAAMC,GAC3CV,EAAoBW,EAAEjB,EAASe,IAClCG,OAAOC,eAAenB,EAASe,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEV,EAAoBgB,EAAI,SAAStB,GACX,oBAAXuB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAenB,EAASuB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAenB,EAAS,aAAc,CAAEyB,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBQ,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAAShC,GAChC,IAAIe,EAASf,GAAUA,EAAO2B,WAC7B,WAAwB,OAAO3B,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAK,EAAoBQ,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRV,EAAoBW,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG7B,EAAoBgC,EAAI,GAIjBhC,EAAoBA,EAAoBiC,EAAI,G,+BC/ErD,IAAYC,ECEAC,E,ODFZ,SAAYD,GACV,wBACA,oBACA,0BACA,8BACA,gBACA,cACA,4BACA,kBACA,4BACA,kCACA,4CACA,8BAZF,CAAYA,MAAS,KCErB,SAAYC,GACV,kBACA,oBACA,kBACA,oBACA,gBALF,CAAYA,MAAa,KAQV,MAAM,EAcnB,YAAY1B,EAAc2B,GAXlB,KAAAC,cAA+BF,EAAcG,OAYnDC,KAAK9B,KAAOA,EACZ8B,KAAKH,OAASA,EACdG,KAAKC,KAAOJ,EAAOI,KACnBD,KAAKE,SAAU,EACfF,KAAKC,KAAKd,KAAKQ,EAAUQ,aAAc,KACrCH,KAAKF,cAAgBF,EAAcG,SAErCC,KAAKC,KAAKd,KAAKQ,EAAUS,oBAAsBC,IACzCA,EAASC,QAAQN,KAAK9B,OAAS,IACjC8B,KAAKF,cAAgBF,EAAcG,UAGvCC,KAAKC,KAAKd,KAAKQ,EAAUY,eAAiBF,IACpCA,EAASC,QAAQN,KAAK9B,OAAS,IACjC8B,KAAKF,cAAgBF,EAAcY,UAGvCR,KAAKC,KAAKd,KAAKQ,EAAUc,aAAeJ,IAClCA,EAASC,QAAQN,KAAK9B,OAAS,IACjC8B,KAAKF,cAAgBF,EAAcG,UAGvCC,KAAKC,KAAKd,KAAKQ,EAAUe,UAAW,KAC9BV,KAAKE,SACPF,KAAKW,oBAKX,aACE,OAAOX,KAAKF,cAMd,eACE,OAAOE,KAAKC,KAAKW,eAAiBZ,KAAKF,gBAAkBF,EAAcY,OAGzE,OACMR,KAAKE,UACTF,KAAKE,SAAU,EACXF,KAAKC,KAAKW,eACZZ,KAAKW,mBAID,kBACFX,KAAKF,gBAAkBF,EAAciB,UACvCb,KAAKF,cAAgBF,EAAciB,QACnCb,KAAKC,KAAKa,SAAS,CAACd,KAAK9B,QAI7B,UAAqD6C,EAAcC,GACjEhB,KAAKC,KAAKd,KAAK4B,EAAWC,EAAUhB,KAAK9B,MAG3C,YAAuD6C,EAAcC,GACnEhB,KAAKC,KAAKgB,OAAOF,EAAWC,EAAUhB,KAAK9B,MAG7C,QACM8B,KAAKF,gBAAkBF,EAAcsB,UACvClB,KAAKE,SAAU,EACfF,KAAKF,cAAgBF,EAAcsB,QACnClB,KAAKC,KAAKkB,UAAU,CAACnB,KAAK9B,OAC1B8B,KAAKF,cAAgBF,EAAcG,SC5F1B,MAAMqB,EAArB,cACI,KAAAC,UAAsC,GAEtC,IAA8BnD,GAE5B,OADgB8B,KAAKqB,UAAUnD,IACZ,GAGrB,IAA8BA,EAAS8C,EAAuCM,GACvEtB,KAAKqB,UAAUnD,KAClB8B,KAAKqB,UAAUnD,GAAQ,IAEvB8B,KAAKqB,UAAUnD,GAAOqD,KAAK,CACzBC,GAAIR,EACJM,QAASA,GAAW,OAI1B,OAAiCpD,EAAS8C,EAAuCM,GAC/E,IAAKpD,IAAS8C,IAAaM,EAEzB,YADAtB,KAAKqB,UAAY,IAInB,MAAMI,EAAavD,EAAO,CAACA,GAAQG,OAAOqD,KAAK1B,KAAKqB,WAEhDL,GAAYM,EACdtB,KAAK2B,eAAeF,EAAOT,EAAUM,GAErCtB,KAAK4B,mBAAmBH,GAIpB,eAAyCA,EAAYT,EAAwCM,GACnGG,EAAMI,QAAS3D,IACb,MAAMmD,EAA4DrB,KAAKqB,UAAUnD,IAAS,GAC1F8B,KAAKqB,UAAUnD,GAAQmD,EAAUS,OAC9BC,IACC,MAAMC,EAAkBhB,GAAYA,IAAae,EAAgBP,GAC3DS,EAAiBX,GAAWA,IAAYS,EAAgBT,QAC9D,OAAQU,IAAoBC,MAM5B,mBAA6CR,GACnDA,EAAMI,QAAS3D,WACN8B,KAAKqB,UAAUnD,MCxCf,MAAM,EAArB,cACE,KAAAmD,UAAwC,IAAID,EAE5C,KAA+BL,EAAcC,EAAuCM,GAElF,OADAtB,KAAKqB,UAAUa,IAAInB,EAAWC,EAAUM,GACjCtB,KAGT,OAAiCe,EAAcC,EAAuCM,GAEpF,OADAtB,KAAKqB,UAAUc,OAAOpB,EAAWC,EAAUM,GACpCtB,KAGT,KAA+Be,EAAcqB,GAC3C,MAAMf,EAAYrB,KAAKqB,UAAU7C,IAAIuC,GAE/BsB,GArBkBC,EAqB+BF,IApBtCE,EAAgBC,SACa,iBAApCD,EAAgBC,QAAQjB,QAmB8Bc,EAAMG,QAAQjB,QAC1E,KAtBmB,IAACgB,EAqCxB,OAbqBjB,GAAaA,EAAUmB,OAAS,GAGnDnB,EAAUQ,QAASb,IACjB,MAAMyB,EAAoBzB,EAASM,UAAYe,IACrBrB,EAASM,UAAYe,GAEvBI,IACtBzB,EAASQ,GAAGY,KAKXpC,MC1CX,IAAY0C,GAAZ,SAAYA,GACR,yBACA,8BACA,wBACA,gCAJJ,CAAYA,MAAY,KAOjB,MAAMC,EAAe,IAAIC,IAAY,CAC1CF,EAAanC,eACbmC,EAAatC,oBACbsC,EAAajC,aACbiC,EAAaG,uBA2DFC,EAAiBV,IAC5B,MAAMW,EAAU,CACdC,MAAOZ,EAAMa,KACbC,QAASd,EAAMc,SAGjB,OAAOC,KAAKC,UAAUL,IC5DxB,IAAYM,GAAZ,SAAYA,GACV,cACA,gBAFF,CAAYA,MAAkB,KAKvB,MAAMC,EAAiB,IAAIV,IAAY,CAACS,EAAmBE,KAAMF,EAAmBG,QAY5E,MAAM,UAAmB,EAKtC,YAAYC,EAAaC,GACvBC,QACA3D,KAAKyD,GAAKA,EACVzD,KAAK0D,UAAYA,EACjB1D,KAAK4D,gBAGP,KAAKC,GACH,QAAK7D,KAAK0D,WACH1D,KAAK0D,UAAUI,KAAKD,GAQ7B,YAAYE,EAAqBb,GAC/B,GAAII,EAAeU,IAAID,GACrB,MAAM,IAAIE,MAAM,GAAGF,kDAGrB,OAAO/D,KAAK8D,KAAKhB,EAAc,CAAEG,KAAMc,EAAab,aAOtD,SAAS7C,GACPL,KAAK8D,KAAKhB,EAAc,CACtBG,KAAMI,EAAmBE,KACzBL,QAAS7C,KAIb,UAAUA,GACRL,KAAK8D,KAAKhB,EAAc,CACtBG,KAAMI,EAAmBG,MACzBN,QAAS7C,KAIb,QACML,KAAK0D,WACP1D,KAAK0D,UAAUQ,QAIX,gBACN,MAAMC,EAAmBC,IAClBpE,KAAK0D,YACV1D,KAAK0D,UAAUzC,OAAOtB,EAAU0E,QAASD,EAAUE,SACnDtE,KAAK0D,UAAUzC,OAAOtB,EAAU4E,MAAOH,EAAUI,OACjDxE,KAAK0D,UAAUzC,OAAOtB,EAAUI,OAAQqE,EAAUK,UAG9CL,EAAY,CAChBE,QAAUI,IACR,IAAIC,EAAgB,KACpB,IACEA,EDrFmB,CAACD,IAC5B,GAAIA,EAAc,CAChB,MAAME,EAAczB,KAAK0B,MAAMH,GAC/B,GAAI/B,EAAaqB,IAAIY,EAAY5B,SAC1B4B,EAAY1B,SAAW4B,MAAMC,QAAQH,EAAY1B,SACpD,MAAO,CACLD,KAAM+B,EAAkBT,MACxBC,MAAO,qEACPX,KAAM,qBAIZ,OAAQe,EAAY5B,OAClB,KAAKN,EAAanC,eAChB,MAAO,CACL0C,KAAM+B,EAAkBzE,eACxBiE,MAAO,KACPX,KAAMe,EAAY1B,SAEtB,KAAKR,EAAatC,oBAChB,MAAO,CACL6C,KAAM+B,EAAkB5E,oBACxBoE,MAAO,KACPX,KAAMe,EAAY1B,SAEtB,KAAKR,EAAajC,aAChB,MAAO,CACLwC,KAAM+B,EAAkBvE,aACxB+D,MAAO,KACPX,KAAMe,EAAY1B,SAEtB,KAAKR,EAAaG,qBAChB,MAAO,CACLI,KAAM+B,EAAkBnC,qBACxB2B,MAAO,KACPX,KAAMe,EAAY1B,SAEtB,QACE,MAAO,CACLD,KAAM+B,EAAkBX,QACxBG,MAAO,KACPX,KAAMe,EAAY1B,SAAW,KAC7BX,QAAS,IACHqC,EAAY5B,MAAQ,CAAE1B,QAASsD,EAAY5B,OAAU,MAMnE,MAAO,CACLC,KAAM+B,EAAkBT,MACxBC,MAAO,oCACPX,KAAM,sBCiCgBoB,CAAcP,EAAab,MAC3C,MAAOqB,GACPlF,KAAKmF,KAAKxF,EAAU4E,MAAO,CACzBtB,KAAM+B,EAAkBT,MACxBC,MAAOU,EACPrB,KAAMV,KAAKC,UAAUsB,KAIzB,GAAIC,EACF,OAAQA,EAAc1B,MACpB,KAAK+B,EAAkBT,MACrBvE,KAAKmF,KAAKxF,EAAU4E,MAAOI,GAC3B,MACF,KAAKK,EAAkB5E,oBACrBJ,KAAKmF,KAAKxF,EAAUS,oBAAqBuE,EAAcd,MACvD,MACF,KAAKmB,EAAkBzE,eACrBP,KAAKmF,KAAKxF,EAAUY,eAAgBoE,EAAcd,MAClD,MACF,KAAKmB,EAAkBvE,aACrBT,KAAKmF,KAAKxF,EAAUc,aAAckE,EAAcd,MAChD,MACF,KAAKmB,EAAkBnC,qBACrB7C,KAAKmF,KAAKxF,EAAU4E,MAAOI,GAC3B,MACF,QACE3E,KAAKmF,KAAKxF,EAAU0E,QAASM,KAIrCH,MAAQA,IACNxE,KAAKmF,KAAKxF,EAAU4E,MAAO,IACtBC,EACHvB,KAAM+B,EAAkBT,MACxBV,KAAM,QAGVY,OAASW,IA7GS,IAAC9C,EA8GjB6B,EAAgBC,IA9GC9B,EAgHG8C,GA/GV7C,cAC6B,IAAjCD,EAAgBC,QAAQ8C,MA+G5BrF,KAAKsF,iBAAiBF,GAGxBpF,KAAK0D,UAAY,KACjB1D,KAAKmF,KAAKxF,EAAUI,OAAQqF,KAI3BpF,KAAK0D,YACV1D,KAAK0D,UAAUvE,KAAKQ,EAAU0E,QAASD,EAAUE,SACjDtE,KAAK0D,UAAUvE,KAAKQ,EAAU4E,MAAOH,EAAUI,OAC/CxE,KAAK0D,UAAUvE,KAAKQ,EAAUI,OAAQqE,EAAUK,SAG1C,iBAAiBW,GACvB,MAAMG,EDzEwB,CAACH,GAC5BA,EAAW7C,SAAY6C,EAAW7C,QAAQ8C,KAS3CD,EAAW7C,QAAQ8C,KAAO,KAMxBD,EAAW7C,QAAQ8C,MAAQ,MAAQD,EAAW7C,QAAQ8C,MAAQ,KACzD,IACFD,EACHZ,MAAO,yBAKNY,GAtBLI,QAAQhB,MAAM,0CAEP,IACFY,EACHZ,MAAO,uBCmEMiB,CAAmBL,GAE9BG,EAAOtC,OAAS+B,EAAkBjF,OACpCC,KAAKmF,KAAKxF,EAAUI,OAAQwF,GAE5BvF,KAAKmF,KAAKxF,EAAU4E,MAAOgB,IC5IlB,MAAM,UAA4B,EAW/C,YAAYG,EAAwBxH,GAClCyF,QACA3D,KAAK2F,WAAa,KAChB,MAAMC,EAAO5F,KAET4F,EAAKF,MAAMG,gBACbD,EAAKE,YAAYnG,EAAUoG,aAE3BH,EAAKI,WAGThG,KAAK0F,MAAQA,EACb1F,KAAK9B,KAAOA,EAEZ8B,KAAKiG,MAAQ,MAGf,UACE,GAAIjG,KAAKH,QAAyB,gBAAfG,KAAKiG,MACtB,OAAO,EAGT,MAAM,IAAEC,GAAQlG,KAAK0F,MACrB,IACE1F,KAAKH,OAASG,KAAK0F,MAAMS,UAAUD,GACnC,MAAOhB,GAWP,OATAkB,WAAW,KACTpG,KAAKqG,QAAQnB,GACblF,KAAKsG,SAAS,CACZrD,KAAM+B,EAAkBT,MACxBV,KAAM,KACNW,MAAOU,EACP3C,QAAS,QAGN,EAKT,OAFAvC,KAAK4D,gBACL5D,KAAK8F,YAAYnG,EAAU4G,aACpB,EAOT,QACE,QAAIvG,KAAKH,SACPG,KAAKH,OAAOqE,SACL,GAKX,KAAKL,GACH,MAAmB,SAAf7D,KAAKiG,QAEPG,WAAW,KACLpG,KAAKH,QACPG,KAAKH,OAAOiE,KAAKD,MAGd,GAKH,kBACD7D,KAAKH,SACVG,KAAKH,OAAO2G,OAAS,KACrBxG,KAAKH,OAAO4G,QAAU,KACtBzG,KAAKH,OAAO6G,QAAU,KACtB1G,KAAKH,OAAO8G,UAAY,MAIlB,SACN3G,KAAK8F,YAAYnG,EAAUiH,MACtB5G,KAAKH,SACVG,KAAKH,OAAO2G,OAAS,MAGf,QAAQhC,GACdxE,KAAKmF,KAAKxF,EAAU4E,MAAO,CACzBtB,KAAM+B,EAAkBT,MACxBC,MAAOA,GAAS,6BAChBX,KAAM,OAIF,QAAQuB,GACVA,EACFpF,KAAKsG,SAAS,CACZrD,KAAMmC,EAAWyB,SAAW7B,EAAkBjF,OAASiF,EAAkBT,MACzEV,KAAMuB,EAAWyB,SAAWzB,EAAW0B,OAAS,KAChDtC,MAAOY,EAAWyB,SAAW,KAAOzB,EAAW0B,OAC/CvE,QAAS,CACP8C,KAAMD,EAAWC,QAIrBrF,KAAKsG,SAAS,CACZrD,KAAM+B,EAAkBjF,OACxB8D,KAAM,KACNW,MAAO,4BACPjC,QAAS,KAGbvC,KAAKmE,kBACLnE,KAAKH,YAASkH,EAGR,UAAUzC,GAChBtE,KAAKmF,KAAKxF,EAAU0E,QAAS,CAC3BpB,KAAM+B,EAAkBX,QACxBR,KAA8B,iBAAjBS,EAAQT,KAAoBS,EAAQT,KAAOV,KAAKC,UAAUkB,EAAQT,MAC/EW,MAAO,OAIH,gBACDxE,KAAKH,SACVG,KAAKH,OAAO2G,OAAS,KACnBxG,KAAKgH,UAEPhH,KAAKH,OAAO4G,QAAU,KACpBzG,KAAKqG,WAEPrG,KAAKH,OAAO6G,QAAWtB,IACrBpF,KAAKgG,QAAQZ,IAEfpF,KAAKH,OAAO8G,UAAarC,IACvBtE,KAAKiH,UAAU3C,KAIX,YAAY2B,GAClBT,QAAQ0B,IAAI,eAAgBjB,GAC5BjG,KAAKiG,MAAQA,EACbjG,KAAKmF,KAAKc,OAAOc,GAGX,SAASI,GACfnH,KAAKiG,MAAQtG,EAAUI,OACvBC,KAAKmF,KAAKxF,EAAUI,OAAQoH,ICtKjB,MAAM,EAOnB,YAAYjJ,EAAckJ,GACxBpH,KAAKoH,QAAUA,GAAW,GAE1B,MAAMC,EAAS,KAAKD,EAAQE,OAAS,IAAM,KACrCC,EAAO,GAAGH,EAAQG,QAAQH,EAAQI,OAElCC,EAAWL,EAAQM,YAAcrJ,OAAOsJ,QAAQP,EAAQM,aAAaE,IAAI,EAAE1I,EAAKN,KAAW,GAAGiJ,mBAAmB3I,MAAQ2I,mBAAmB3I,MAAQ4I,KAAK,KAAO,KAEhK5B,EAAM,GAAGmB,OAAYE,KAAQH,EAAQW,OAAON,EAAW,IAAKA,IAAc,KAEhFzH,KAAK0F,MAAQ,CACXQ,MACAL,cAAa,MACFtI,OAAOyK,UAElB7B,UAAU8B,GACD,IAAID,UAAUC,IAGzBjI,KAAK9B,KAAOA,EAGd,QAAQ8C,GACN,IAAIkH,GAAY,EAEhB,MAAMxE,EAAY,IAAI,EACpB1D,KAAK0F,MAAO1F,KAAK9B,MAGbiK,EAAgB,KACpBzE,EAAUzC,OAAOtB,EAAUoG,YAAaoC,GACxCzE,EAAU0E,WAGNjE,EAAkB,KACtBT,EAAUzC,OAAOtB,EAAUoG,YAAaoC,GAExCzE,EAAUzC,OAAOtB,EAAUiH,KAAMI,GAEjCtD,EAAUzC,OAAOtB,EAAU4E,MAAO8B,GAElC3C,EAAUzC,OAAOtB,EAAUI,OAAQuG,IAG/BU,EAAS,KACbkB,GAAY,EACZ/D,IACA,MAAMkE,EAAS,IAAI,EAAW,GAAI3E,GAClC1C,EAAS,KAAMqH,IAGXhC,EAAW7B,IACfL,IACAnD,EAASwD,IAGL8B,EAAW,KACfnC,KAUF,OAPAT,EAAUvE,KAAKQ,EAAUoG,YAAaoC,GACtCzE,EAAUvE,KAAKQ,EAAUiH,KAAMI,GAC/BtD,EAAUvE,KAAKQ,EAAU4E,MAAO8B,GAChC3C,EAAUvE,KAAKQ,EAAUI,OAAQuG,GAEjC5C,EAAUiC,aAEH,CACL2C,MAAO,KACDJ,IAGJ/D,IACAT,EAAUQ,YC9DH,MAAM,UAA0B,EAmB3C,YAAYkD,GACVzD,QACA3D,KAAKoH,QAAUA,GAAW,GAC1BpH,KAAKiG,MAAQ,cACbjG,KAAKuI,WAAa,KAElBvI,KAAKwI,eAAiBxI,KAAKyI,sBAC3BzI,KAAK0I,oBAAsB1I,KAAK2I,yBAAyB3I,KAAKwI,gBAE9DxI,KAAK0D,UAAY,IAAI,EACnB,KACA0D,GAEFpH,KAAK4I,OAAS,KAEd5I,KAAK6I,iBAAmB,EACxB7I,KAAK8I,WAAa,EAGpB,UACM9I,KAAKuI,YAAcvI,KAAK4I,SAG5B5I,KAAK+I,YAAYpJ,EAAU4G,YAC3BvG,KAAKgJ,kBACLhJ,KAAKiJ,uBAGP,KAAKpF,GACH,QAAI7D,KAAKuI,YACAvI,KAAKuI,WAAWzE,KAAKD,GAKhC,YAAY3F,EAAc2F,GACxB,QAAI7D,KAAKuI,YACAvI,KAAKuI,WAAWW,YAAYhL,EAAM2F,GAK7C,SAASxD,GAIP,OAHIL,KAAKuI,YACPvI,KAAKuI,WAAWzH,SAAST,IAEpB,EAGT,UAAUA,GAIR,OAHIL,KAAKuI,YACPvI,KAAKuI,WAAWpH,UAAUd,IAErB,EAGT,aACEL,KAAKmJ,uBACLnJ,KAAK+I,YAAYpJ,EAAUQ,cAGtB,cACL,OAAOH,KAAKiG,QAAUtG,EAAUe,UAG1B,kBACN,MAAMM,EAAwC,CAACwD,EAAiC+D,KAC1E/D,EACFxE,KAAK4I,OAAS5I,KAAK0D,UAAU0E,QAAQpH,IAErChB,KAAKoJ,kBAELpJ,KAAKqJ,wBACLrJ,KAAKsJ,cAAcf,GACnBvI,KAAK+I,YAAYpJ,EAAUe,aAG/BV,KAAK4I,OAAS5I,KAAK0D,UAAU0E,QAAQpH,GAG/B,kBACFhB,KAAK4I,SACP5I,KAAK4I,OAAON,QACZtI,KAAK4I,OAAS,MAIV,uBAIN,GAHA5I,KAAKoJ,kBACLpJ,KAAKuJ,kBACLvJ,KAAKqJ,wBACDrJ,KAAKuI,WAAY,CACnB,MAAMA,EAAavI,KAAKwJ,oBACpBjB,GAAYA,EAAWrE,SAIvB,QAAQuF,GACVA,EAAQ,GACVzJ,KAAKmF,KAAKxF,EAAU4G,WAAY,CAC9BtD,KAAM+B,EAAkBuB,WACxB1C,KAAM6F,OAAOC,KAAKC,MAAMH,EAAQ,MAChCjF,MAAO,OAGXxE,KAAK8I,WAAa1C,WAAW,KAC3BpG,KAAKmJ,uBACLnJ,KAAKoI,WACJqB,GAAS,GAGN,kBACFzJ,KAAK8I,aACH9I,KAAK8I,YACPe,aAAa7J,KAAK8I,YAEpB9I,KAAK8I,WAAa,GAId,sBACN9I,KAAK6I,iBAAmBzC,WACtB,KACEpG,KAAK+I,YAAYpJ,EAAUmK,cAE7B9J,KAAKoH,QAAQ2C,oBAIT,wBACF/J,KAAK6I,kBACPgB,aAAa7J,KAAK6I,kBAEpB7I,KAAK6I,iBAAmB,EAGlB,yBAAyBL,GAC/B,MAAO,IACFA,EACHlE,QAAU0F,IAERhK,KAAKmF,KAAKxF,EAAU0E,QAAS2F,IAE/BxF,MAAQyF,IAENjK,KAAKmF,KAAKxF,EAAU4E,MAAO0F,IAE7BxF,OAASW,IACPpF,KAAKwJ,oBACDxJ,KAAKkK,eACPlK,KAAKmK,QAAQ,KAEfnK,KAAKmF,KAAKxF,EAAUI,OAAQqF,IAE9BgF,cAAiB/J,GAAaL,KAAKmF,KAAKxF,EAAUY,eAAgBF,GAClEgK,kBAAqBhK,GAAaL,KAAKmF,KAAKxF,EAAUS,oBAAqBC,GAC3EiK,YAAejK,GAAaL,KAAKmF,KAAKxF,EAAUc,aAAcJ,IAI1D,sBACN,MAAMkK,EAAoBvJ,GAA2CqH,IAC/DA,EAAO7D,OACTxE,KAAKmF,KAAKxF,EAAU4E,MAAO,CACzBtB,KAAM+B,EAAkBT,MACxBV,KAAM,KACNW,MAAO6D,EAAO7D,QAGlBxD,EAASqH,IAGX,MAAO,CACLmC,QAASD,EAAiB,KACxBvK,KAAKyK,eAEPC,YAAaH,EAAiB,KAC5BvK,KAAKmK,QAAQ,QAKX,cAAc5B,GACpBvI,KAAKuI,WAAaA,EACbvI,KAAKuI,aAGVvI,KAAKuI,WAAWpJ,KAAKQ,EAAU0E,QAASrE,KAAK0I,oBAAoBpE,SACjEtE,KAAKuI,WAAWpJ,KAAKQ,EAAUc,aAAcT,KAAK0I,oBAAoB4B,aACtEtK,KAAKuI,WAAWpJ,KAAKQ,EAAUS,oBAAqBJ,KAAK0I,oBAAoB2B,mBAC7ErK,KAAKuI,WAAWpJ,KAAKQ,EAAUY,eAAgBP,KAAK0I,oBAAoB0B,eACxEpK,KAAKuI,WAAWpJ,KAAKQ,EAAU4E,MAAOvE,KAAK0I,oBAAoBlE,OAC/DxE,KAAKuI,WAAWpJ,KAAKQ,EAAUI,OAAQC,KAAK0I,oBAAoBjE,SAG1D,oBACN,IAAKzE,KAAKuI,WACR,OAAO,KAETvI,KAAKuI,WAAWtH,OAAOtB,EAAU0E,QAASrE,KAAK0I,oBAAoBpE,SACnEtE,KAAKuI,WAAWtH,OAAOtB,EAAUc,aAAcT,KAAK0I,oBAAoB4B,aACxEtK,KAAKuI,WAAWtH,OAAOtB,EAAUS,oBAAqBJ,KAAK0I,oBAAoB2B,mBAC/ErK,KAAKuI,WAAWtH,OAAOtB,EAAUY,eAAgBP,KAAK0I,oBAAoB0B,eAC1EpK,KAAKuI,WAAWtH,OAAOtB,EAAU4E,MAAOvE,KAAK0I,oBAAoBlE,OACjExE,KAAKuI,WAAWtH,OAAOtB,EAAUI,OAAQC,KAAK0I,oBAAoBjE,QAElE,MAAM,WAAE8D,GAAevI,KAGvB,OAFAA,KAAKuI,WAAa,KAEXA,EAGD,YAAYoC,GAIlB,MAAMC,EAAgB5K,KAAKiG,MAC3BjG,KAAKiG,MAAQ0E,EACTC,IAAkBD,GACpB3K,KAAKmF,KAAKwF,OAAU5D,GAIhB,cACN,OAAO/G,KAAKiG,QAAUtG,EAAU4G,YAAcvG,KAAKiG,QAAUtG,EAAUe,WCjRtE,MAAMmK,EAAiC,CAC5CtD,KAAM,GACNC,KAAM,GACNO,KAAM,GACNgC,mBAAoB,IACpBzC,QAAQ,GCIV,IAAYtC,GAAZ,SAAYA,GACV,mCACA,6BACA,kCACA,4CACA,8BACA,8CACA,yBACA,2BARF,CAAYA,MAAiB,KA+BtB,MAAM,EAmBX,YAAYoC,GACV,GALF,KAAA/G,SAAsB,IAKf+G,GAA8B,iBAAZA,EACrB,MAAM,IAAInD,MAAM,wCAGlB,MAAM6G,EAAqB1D,GAAW,GAEtCpH,KAAK+K,OAAS,IACTF,EACHrD,KAAMsD,EAAmBxD,OAAS,IAAM,MACrCwD,GAGL9K,KAAKC,KAAO,IAAI,EAAkBD,KAAK+K,QAEvC/K,KAAKC,KAAKd,KAAKQ,EAAUe,UAAW,KAClCrC,OAAO2M,OAAOhL,KAAKK,UAAUwB,QAASP,IACpCA,EAAQwG,WAIZ9H,KAAKC,KAAKd,KAAKQ,EAAU4E,MAAQ0G,IAC/BzF,QAAQhB,MAAMyG,KAGhB,EAASC,UAAU3J,KAAKvB,MAEpB,EAASmL,SACXnL,KAAKoI,UA1CT,eACE,EAAS+C,SAAU,EAEnB,EAASD,UAAUrJ,QAASuJ,IAC1BA,EAAShD,YA0Cb,UACEpI,KAAKC,KAAKmI,UAGZ,aACEpI,KAAKC,KAAKwK,aAQZ,YAAYY,EAAiBxH,GAC3B,OAAO7D,KAAKC,KAAKiJ,YAAYmC,EAASxH,GAGxC,gBAAgByH,GACdA,EAAczJ,QAAS0J,IACrBvL,KAAKwL,YAAYD,KAIrB,iBAAiBE,GACfA,EAAa5J,QAAS6J,IACpB1L,KAAK2L,aAAaD,KAWtB,UAAqD3K,EAAcC,EAAwDM,GACzH,OAAOtB,KAAKC,KAAKd,KAAK4B,EAAWC,EAAUM,GAU7C,YAAuDP,EAAcC,EAAwDM,GAC3H,OAAOtB,KAAKC,KAAKgB,OAAOF,EAAWC,EAAUM,GAG/C,YAAYsK,GACV,GAAI5L,KAAKK,SAASuL,GAChB,MAAM,IAAI3H,MAAM,WAAW2H,oBAG7B,OADA5L,KAAKK,SAASuL,GAAc,IAAI,EAAQA,EAAY5L,MAC7CA,KAAKK,SAASuL,GAGvB,aAAaA,GACX,IAAK5L,KAAKK,SAASuL,GACjB,MAAM,IAAI3H,MAAM,WAAW2H,oBAE7B,MAAMtK,EAAUtB,KAAKK,SAASuL,GAG9B,OAFAtK,EAAQuK,eACD7L,KAAKK,SAASuL,GACdtK,EAGT,WAAWpD,GACT,OAAO8B,KAAKK,SAASnC,IAxHhB,EAAAgN,UAAwB,GAExB,EAAAC,SAAmB,EC7C5B,sIAGA,MAAMW,EAAqBC,IACzB,MAAM7F,EAAM,IAAI8F,IAAID,GACdE,EAAc/F,EAAIgG,SAAWhG,EAAIgG,SAASC,QAAQ,IAAK,IAAM,KAEnE,OAAIjG,EAAIkG,UAAYlG,EAAIsB,MAAQyE,EACvB,CACL1E,KAAMrB,EAAIkG,SACV5E,KAAMtB,EAAIsB,KACVO,KAAMkE,GAIH,MAIM","file":"socket.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SFSocket\"] = factory();\n\telse\n\t\troot[\"SFSocket\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * Dictionary of event names used across everywhere\n */\nexport enum NamesDict {\n  CONNECTED= 'connected',\n  MESSAGE='message',\n  CONNECTING='connecting',\n  DISCONNECTED='disconnected',\n  ERROR='error',\n  OPEN='open',\n  INITIALIZED='initialized',\n  CLOSED='closed',\n  UNAVAILABLE='unavailable',\n  CHANNEL_JOINED='channel_joined',\n  CHANNEL_JOIN_FAILED='channel_join_failed',\n  CHANNEL_LEFT='channel_left',\n}\n","import { UEventCallback } from './types';\nimport { SFSocket } from './SFSocket';\nimport ConnectionManager, { ConnectionManagerEventMap } from './connection/ConnectionManager';\nimport { NamesDict } from './eventdispatcher/events';\n\nexport enum ChannelStatus {\n  CLOSED = 'closed', // Connection command not yet sent or leave commang\n  JOINING = 'joining', // Socket sent join command, server has not responded with OK\n  JOINED = 'joined', // Server returned OK for join command\n  LEAVING = 'leaving', // Socket sent leave command, server has not responded with OK\n  ERROR = 'error', // Last command finished with error\n}\n\nexport default class Channel {\n  name: string;\n\n  private channelStatus: ChannelStatus = ChannelStatus.CLOSED;\n\n  private socket: SFSocket;\n\n  private cMgr: ConnectionManager;\n\n  /**\n   * Flag to indicate if channel should be joined\n   */\n  enabled: boolean;\n\n  constructor(name: string, socket: SFSocket) {\n    this.name = name;\n    this.socket = socket;\n    this.cMgr = socket.cMgr;\n    this.enabled = false;\n    this.cMgr.bind(NamesDict.DISCONNECTED, () => {\n      this.channelStatus = ChannelStatus.CLOSED; // Channel has been closed by external event\n    });\n    this.cMgr.bind(NamesDict.CHANNEL_JOIN_FAILED, (channels: string[]) => {\n      if (channels.indexOf(this.name) >= 0) {\n        this.channelStatus = ChannelStatus.CLOSED; // Channel has failed to join\n      }\n    });\n    this.cMgr.bind(NamesDict.CHANNEL_JOINED, (channels: string[]) => {\n      if (channels.indexOf(this.name) >= 0) {\n        this.channelStatus = ChannelStatus.JOINED; // Channel has failed to join\n      }\n    });\n    this.cMgr.bind(NamesDict.CHANNEL_LEFT, (channels: string[]) => {\n      if (channels.indexOf(this.name) >= 0) {\n        this.channelStatus = ChannelStatus.CLOSED; // Channel has failed to join\n      }\n    });\n    this.cMgr.bind(NamesDict.CONNECTED, () => {\n      if (this.enabled) { // if should join/re-join\n        this.sendJoinCommand();\n      }\n    });\n  }\n\n  get status() {\n    return this.channelStatus;\n  }\n\n  /**\n   * Channel is active and working rn\n   */\n  get isActive() {\n    return this.cMgr.isConnected() && this.channelStatus === ChannelStatus.JOINED;\n  }\n\n  join() {\n    if (this.enabled) return;\n    this.enabled = true;\n    if (this.cMgr.isConnected()) {\n      this.sendJoinCommand();\n    }\n  }\n\n  private sendJoinCommand() {\n    if (this.channelStatus !== ChannelStatus.JOINING) {\n      this.channelStatus = ChannelStatus.JOINING;\n      this.cMgr.sendJoin([this.name]);\n    }\n  }\n\n  subscribe<K extends keyof ConnectionManagerEventMap>(eventName: K, callback: UEventCallback<ConnectionManagerEventMap, K>) {\n    this.cMgr.bind(eventName, callback, this.name);\n  }\n\n  unsubscribe<K extends keyof ConnectionManagerEventMap>(eventName: K, callback: UEventCallback<ConnectionManagerEventMap, K>) {\n    this.cMgr.unbind(eventName, callback, this.name);\n  }\n\n  leave() {\n    if (this.channelStatus !== ChannelStatus.LEAVING) {\n      this.enabled = false;\n      this.channelStatus = ChannelStatus.LEAVING;\n      this.cMgr.sendLeave([this.name]);\n      this.channelStatus = ChannelStatus.CLOSED;\n    }\n  }\n}\n","import {\n  ICallback, ICallbackTable, UEventCallback,\n} from '../types';\n\nexport default class CallbackRegistry<EventMap> {\n    callbacks: ICallbackTable<EventMap> = {};\n\n    get<K extends keyof EventMap>(name: K): ICallback[] {\n      const results = this.callbacks[name];\n      return (results || [])!; // TODO: Why TS wants '!' here?\n    }\n\n    add<K extends keyof EventMap>(name: K, callback: UEventCallback<EventMap, K>, channel?: string) {\n      if (!this.callbacks[name]) {\n        this.callbacks[name] = [];\n      }\n        this.callbacks[name]!.push({\n          fn: callback,\n          channel: channel || null,\n        });\n    }\n\n    remove<K extends keyof EventMap>(name: K, callback: UEventCallback<EventMap, K>, channel?: string) {\n      if (!name && !callback && !channel) {\n        this.callbacks = {};\n        return;\n      }\n\n      const names: K[] = name ? [name] : Object.keys(this.callbacks) as K[];\n\n      if (callback || channel) {\n        this.removeCallback(names, callback, channel);\n      } else {\n        this.removeAllCallbacks(names);\n      }\n    }\n\n    private removeCallback<K extends keyof EventMap>(names: K[], callback?: UEventCallback<EventMap, K>, channel?: string) {\n      names.forEach((name) => {\n        const callbacks: Array<ICallback<UEventCallback<EventMap, K>>> = (this.callbacks[name] || [])!; // TODO: Why TS wants '!' here?\n        this.callbacks[name] = callbacks.filter(\n          (existedCallback: ICallback) => {\n            const isEqualCallback = callback && callback === existedCallback.fn;\n            const isEqualChannel = channel && channel === existedCallback.channel;\n            return !isEqualCallback && !isEqualChannel;\n          },\n        );\n      });\n    }\n\n    private removeAllCallbacks<K extends keyof EventMap>(names: K[]) {\n      names.forEach((name) => {\n        delete this.callbacks[name];\n      });\n    }\n}\n","import { UEventCallback, ICallback } from '../types';\nimport CallbackRegistry from './CallbackRegistry';\n\nexport interface EventWithChannel {\n  context: { channel: string }\n}\n\nconst isEventWithChannel = (variableToCheck: any): variableToCheck is EventWithChannel => (\n  variableToCheck && variableToCheck.context\n    && typeof variableToCheck.context.channel === 'string'\n);\n\nexport default class EventsDispatcher<EventMap> {\n  callbacks: CallbackRegistry<EventMap> = new CallbackRegistry<EventMap>();\n\n  bind<K extends keyof EventMap>(eventName: K, callback: UEventCallback<EventMap, K>, channel?: string) {\n    this.callbacks.add(eventName, callback, channel);\n    return this;\n  }\n\n  unbind<K extends keyof EventMap>(eventName: K, callback: UEventCallback<EventMap, K>, channel?: string) {\n    this.callbacks.remove(eventName, callback, channel);\n    return this;\n  }\n\n  emit<K extends keyof EventMap>(eventName: K, event: EventMap[K]) : EventsDispatcher<EventMap> {\n    const callbacks = this.callbacks.get(eventName);\n\n    const channelEvent: string | null = isEventWithChannel(event) ? event.context.channel\n      : null;\n\n    const hasCallbacks = callbacks && callbacks.length > 0;\n\n    if (hasCallbacks) {\n      callbacks.forEach((callback: ICallback) => {\n        const isChannelCallback = callback.channel === channelEvent;\n        const isGlobalCallback = !callback.channel || !channelEvent;\n\n        if (isGlobalCallback || isChannelCallback) {\n          callback.fn(event);\n        }\n      });\n    }\n\n    return this;\n  }\n}\n","import { ISFSocketEvent, SFSocketEventType } from './SFSocket';\n\nexport enum SystemEvents {\n    CHANNEL_JOINED = '@join', // server payload is string[] = channel list that were successfully joined\n    CHANNEL_JOIN_FAILED = '#join', // server payload is string[] = channel list that failed to join\n    CHANNEL_LEFT = '@leave', // server payload is string[] = channel list that were successfully left\n    CHANNEL_LEAVE_FAILED = '#leave', // server payload is string[] = channel list that failed to leave\n}\n\nexport const SystemTopics = new Set<string>([\n  SystemEvents.CHANNEL_JOINED,\n  SystemEvents.CHANNEL_JOIN_FAILED,\n  SystemEvents.CHANNEL_LEFT,\n  SystemEvents.CHANNEL_LEAVE_FAILED,\n]);\n\nexport const decodeMessage = (messageEvent: string | null): ISFSocketEvent => {\n  if (messageEvent) {\n    const messageData = JSON.parse(messageEvent);\n    if (SystemTopics.has(messageData.topic)) {\n      if (!messageData.payload && Array.isArray(messageData.payload)) {\n        return {\n          type: SFSocketEventType.ERROR,\n          error: 'WS event system event payload is invalid. Should be a string array',\n          data: 'MessageParseError',\n        };\n      }\n    }\n    switch (messageData.topic) {\n      case SystemEvents.CHANNEL_JOINED:\n        return {\n          type: SFSocketEventType.CHANNEL_JOINED,\n          error: null,\n          data: messageData.payload,\n        };\n      case SystemEvents.CHANNEL_JOIN_FAILED:\n        return {\n          type: SFSocketEventType.CHANNEL_JOIN_FAILED,\n          error: null,\n          data: messageData.payload,\n        };\n      case SystemEvents.CHANNEL_LEFT:\n        return {\n          type: SFSocketEventType.CHANNEL_LEFT,\n          error: null,\n          data: messageData.payload,\n        };\n      case SystemEvents.CHANNEL_LEAVE_FAILED:\n        return {\n          type: SFSocketEventType.CHANNEL_LEAVE_FAILED,\n          error: null,\n          data: messageData.payload,\n        };\n      default:\n        return {\n          type: SFSocketEventType.MESSAGE,\n          error: null,\n          data: messageData.payload || null,\n          context: {\n            ...(messageData.topic ? { channel: messageData.topic } : {}),\n          },\n        };\n    }\n  }\n\n  return {\n    type: SFSocketEventType.ERROR,\n    error: 'MessageEvent has no data property',\n    data: 'MessageParseError',\n  };\n};\n\nexport const encodeMessage = (event: { type: string, payload: any }): string => {\n  const sfEvent = {\n    topic: event.type,\n    payload: event.payload,\n  };\n\n  return JSON.stringify(sfEvent);\n};\n\n/**\n * See:\n * 1. https://developer.mozilla.org/en-US/docs/WebSockets/WebSockets_reference/CloseEvent\n */\nexport const prepareCloseAction = (closeEvent: ISFSocketEvent): ISFSocketEvent => {\n  if (!closeEvent.context || !closeEvent.context.code) {\n    console.error('Socket event do not contain close code'); // eslint-disable-line no-console\n\n    return {\n      ...closeEvent,\n      error: 'Connection refused',\n    };\n  }\n\n  if (closeEvent.context.code < 4000) {\n    // ignore 1000 CLOSE_NORMAL, 1001 CLOSE_GOING_AWAY,\n    //        1005 CLOSE_NO_STATUS, 1006 CLOSE_ABNORMAL\n    // ignore 1007...3999\n    // handle 1002 CLOSE_PROTOCOL_ERROR, 1003 CLOSE_UNSUPPORTED,\n    //        1004 CLOSE_TOO_LARGE\n    if (closeEvent.context.code >= 1002 && closeEvent.context.code <= 1004) {\n      return {\n        ...closeEvent,\n        error: 'Socket is unavailable',\n      };\n    }\n  }\n\n  return closeEvent;\n};\n","import EventsDispatcher from '../eventdispatcher/EventsDispatcher';\nimport { ISFSocketEvent, SFSocketEventType } from '../SFSocket';\nimport TransportConnection from '../transport/TransportConnection';\nimport { decodeMessage, encodeMessage, prepareCloseAction } from '../messageCodingUtils';\nimport { NamesDict } from '../eventdispatcher/events';\n\n/**\n * Lists events that can be emitted by `Connection` class\n */\nexport interface ConnectionEventMap {\n  [NamesDict.CLOSED]: ISFSocketEvent,\n  [NamesDict.ERROR]: ISFSocketEvent,\n  [NamesDict.MESSAGE]: ISFSocketEvent,\n  [NamesDict.CHANNEL_JOIN_FAILED]: string[],\n  [NamesDict.CHANNEL_JOINED]: string[],\n  [NamesDict.CHANNEL_LEFT]: string[],\n}\n\nexport enum ConnectionCommands {\n  JOIN = 'join',\n  LEAVE = 'leave',\n}\n\nexport const SystemCommands = new Set<string>([ConnectionCommands.JOIN, ConnectionCommands.LEAVE]);\n\n\nexport interface EventWithCode {\n  context: { code: string }\n}\n\nconst isEventWithCode = (variableToCheck: any): variableToCheck is EventWithCode => (\n  variableToCheck.context\n    && typeof variableToCheck.context.code !== 'undefined'\n);\n\nexport default class Connection extends EventsDispatcher<ConnectionEventMap> {\n  id: string;\n\n  transport: TransportConnection | null;\n\n  constructor(id : string, transport : TransportConnection) {\n    super();\n    this.id = id;\n    this.transport = transport;\n    this.bindListeners();\n  }\n\n  send(data : string) : boolean {\n    if (!this.transport) return false;\n    return this.transport.send(data);\n  }\n\n  /**\n   * Sends custom command to ws connection\n   * @param commandName - command that has custom handler on server\n   * @param payload - any serializable data\n   */\n  sendCommand(commandName: string, payload: any) : boolean {\n    if (SystemCommands.has(commandName)) {\n      throw new Error(`${commandName} is a reserved command, cant be sent manually`);\n    }\n\n    return this.send(encodeMessage({ type: commandName, payload }));\n  }\n\n  /**\n   * Sends command to join specific channels\n   * @param channels\n   */\n  sendJoin(channels: string[]) {\n    this.send(encodeMessage({\n      type: ConnectionCommands.JOIN,\n      payload: channels,\n    }));\n  }\n\n  sendLeave(channels: string[]) {\n    this.send(encodeMessage({\n      type: ConnectionCommands.LEAVE,\n      payload: channels,\n    }));\n  }\n\n  close() {\n    if (this.transport) {\n      this.transport.close();\n    }\n  }\n\n  private bindListeners() {\n    const unbindListeners = (listeners: any) => { // TODO\n      if (!this.transport) return;\n      this.transport.unbind(NamesDict.MESSAGE, listeners.message);\n      this.transport.unbind(NamesDict.ERROR, listeners.error);\n      this.transport.unbind(NamesDict.CLOSED, listeners.closed);\n    };\n\n    const listeners = {\n      message: (messageEvent: ISFSocketEvent) => {\n        let sfSocketEvent = null;\n        try {\n          sfSocketEvent = decodeMessage(messageEvent.data);\n        } catch (e) {\n          this.emit(NamesDict.ERROR, {\n            type: SFSocketEventType.ERROR,\n            error: e,\n            data: JSON.stringify(messageEvent),\n          });\n        }\n\n        if (sfSocketEvent) {\n          switch (sfSocketEvent.type) {\n            case SFSocketEventType.ERROR:\n              this.emit(NamesDict.ERROR, sfSocketEvent);\n              break;\n            case SFSocketEventType.CHANNEL_JOIN_FAILED:\n              this.emit(NamesDict.CHANNEL_JOIN_FAILED, sfSocketEvent.data as any); // TODO:\n              break;\n            case SFSocketEventType.CHANNEL_JOINED:\n              this.emit(NamesDict.CHANNEL_JOINED, sfSocketEvent.data as any); // TODO:\n              break;\n            case SFSocketEventType.CHANNEL_LEFT:\n              this.emit(NamesDict.CHANNEL_LEFT, sfSocketEvent.data as any); // TODO:\n              break;\n            case SFSocketEventType.CHANNEL_LEAVE_FAILED:\n              this.emit(NamesDict.ERROR, sfSocketEvent);\n              break;\n            default:\n              this.emit(NamesDict.MESSAGE, sfSocketEvent);\n          }\n        }\n      },\n      error: (error: ISFSocketEvent) => {\n        this.emit(NamesDict.ERROR, {\n          ...error,\n          type: SFSocketEventType.ERROR,\n          data: null, // TODO: Are these overrides needed? Check what's being sent here\n        });\n      },\n      closed: (closeEvent: ISFSocketEvent) => { // TODO\n        unbindListeners(listeners);\n\n        if (isEventWithCode(closeEvent)) {\n          this.handleCloseEvent(closeEvent);\n        }\n\n        this.transport = null;\n        this.emit(NamesDict.CLOSED, closeEvent);\n      },\n    };\n\n    if (!this.transport) return;\n    this.transport.bind(NamesDict.MESSAGE, listeners.message);\n    this.transport.bind(NamesDict.ERROR, listeners.error);\n    this.transport.bind(NamesDict.CLOSED, listeners.closed);\n  }\n\n  private handleCloseEvent(closeEvent : ISFSocketEvent) {\n    const action = prepareCloseAction(closeEvent);\n\n    if (action.type === SFSocketEventType.CLOSED) {\n      this.emit(NamesDict.CLOSED, action);\n    } else {\n      this.emit(NamesDict.ERROR, action);\n    }\n  }\n}\n","import EventsDispatcher from '../eventdispatcher/EventsDispatcher';\nimport { ISFSocketConfig, ISFSocketEvent, SFSocketEventType } from '../SFSocket';\nimport { NamesDict } from '../eventdispatcher/events';\n\nexport interface ITransportHooks {\n  url: string;\n  isInitialized(): boolean;\n  getSocket(url: string, options?: ISFSocketConfig): WebSocket;\n}\n\n\n/**\n * Lists events that can be emitted by `TransportConnection` class\n */\nexport interface TransportEventMap {\n  [NamesDict.INITIALIZED]: undefined,\n  [NamesDict.ERROR]: ISFSocketEvent,\n  [NamesDict.MESSAGE]: ISFSocketEvent,\n  [NamesDict.CLOSED]: ISFSocketEvent,\n  [NamesDict.OPEN]: undefined,\n  [NamesDict.CONNECTING]: undefined,\n}\n\nexport default class TransportConnection extends EventsDispatcher<TransportEventMap> {\n  hooks: ITransportHooks;\n\n  name: string;\n\n  state: string;\n\n  socket?: WebSocket;\n\n  initialize: Function;\n\n  constructor(hooks: ITransportHooks, name: string) {\n    super();\n    this.initialize = () => {\n      const self = this;\n\n      if (self.hooks.isInitialized()) {\n        self.changeState(NamesDict.INITIALIZED);\n      } else {\n        self.onClose();\n      }\n    };\n    this.hooks = hooks;\n    this.name = name;\n\n    this.state = 'new';\n  }\n\n  connect() : boolean {\n    if (this.socket || this.state !== 'initialized') {\n      return false;\n    }\n\n    const { url } = this.hooks;\n    try {\n      this.socket = this.hooks.getSocket(url);\n    } catch (e) {\n      // Workaround for MobileSafari bug (see https://gist.github.com/2052006)\n      setTimeout(() => {\n        this.onError(e);\n        this.onClosed({\n          type: SFSocketEventType.ERROR,\n          data: null,\n          error: e,\n          context: {},\n        });\n      });\n      return false;\n    }\n\n    this.bindListeners();\n    this.changeState(NamesDict.CONNECTING);\n    return true;\n  }\n\n  /** Closes the connection.\n   *\n   * @return {Boolean} true if there was a connection to close\n   */\n  close() : boolean {\n    if (this.socket) {\n      this.socket.close();\n      return true;\n    }\n    return false;\n  }\n\n  send(data : any) : boolean { // TODO\n    if (this.state === 'open') {\n      // Workaround for MobileSafari bug (see https://gist.github.com/2052006)\n      setTimeout(() => {\n        if (this.socket) {\n          this.socket.send(data);\n        }\n      });\n      return true;\n    }\n    return false;\n  }\n\n  private unbindListeners() {\n    if (!this.socket) return;\n    this.socket.onopen = null;\n    this.socket.onerror = null;\n    this.socket.onclose = null;\n    this.socket.onmessage = null;\n  }\n\n\n  private onOpen() {\n    this.changeState(NamesDict.OPEN);\n    if (!this.socket) return;\n    this.socket.onopen = null;\n  }\n\n  private onError(error?: string) {\n    this.emit(NamesDict.ERROR, {\n      type: SFSocketEventType.ERROR,\n      error: error || 'websocket connection error',\n      data: null,\n    });\n  }\n\n  private onClose(closeEvent?: CloseEvent) {\n    if (closeEvent) {\n      this.onClosed({\n        type: closeEvent.wasClean ? SFSocketEventType.CLOSED : SFSocketEventType.ERROR,\n        data: closeEvent.wasClean ? closeEvent.reason : null,\n        error: closeEvent.wasClean ? null : closeEvent.reason,\n        context: {\n          code: closeEvent.code,\n        },\n      });\n    } else {\n      this.onClosed({\n        type: SFSocketEventType.CLOSED,\n        data: null,\n        error: 'Closed for unknown reason',\n        context: {},\n      });\n    }\n    this.unbindListeners();\n    this.socket = undefined;\n  }\n\n  private onMessage(message: MessageEvent) {\n    this.emit(NamesDict.MESSAGE, {\n      type: SFSocketEventType.MESSAGE,\n      data: typeof message.data === 'string' ? message.data : JSON.stringify(message.data),\n      error: null,\n    });\n  }\n\n  private bindListeners() {\n    if (!this.socket) return;\n    this.socket.onopen = () => {\n      this.onOpen();\n    };\n    this.socket.onerror = () => {\n      this.onError();\n    };\n    this.socket.onclose = (closeEvent: CloseEvent) => {\n      this.onClose(closeEvent);\n    };\n    this.socket.onmessage = (message: MessageEvent) => {\n      this.onMessage(message);\n    };\n  }\n\n  private changeState(state: NamesDict.OPEN | NamesDict.CONNECTING | NamesDict.INITIALIZED) {\n    console.log('Change state', state);\n    this.state = state;\n    this.emit(state, undefined);\n  }\n\n  private onClosed(params: ISFSocketEvent) {\n    this.state = NamesDict.CLOSED;\n    this.emit(NamesDict.CLOSED, params);\n  }\n}\n","import { UndescribedCallbackFunction } from '../types';\nimport Connection from '../connection/Connection';\nimport TransportConnection, { ITransportHooks } from './TransportConnection';\nimport { ISFSocketConfig } from '../SFSocket';\nimport { NamesDict } from '../eventdispatcher/events';\n\nexport interface IRunner {\n  abort: () => void;\n}\n\nexport interface ITransport {\n  connect(callback: UndescribedCallbackFunction): IRunner;\n}\n\nexport default class Transport implements ITransport {\n  hooks: ITransportHooks;\n\n  name: string;\n\n  options: ISFSocketConfig;\n\n  constructor(name: string, options: ISFSocketConfig) {\n    this.options = options || {};\n\n    const scheme = `ws${options.useTLS ? 's' : ''}`;\n    const host = `${options.host}:${options.port}`;\n    // eslint-disable-next-line max-len\n    const paramStr = options.queryParams ? Object.entries(options.queryParams).map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(key)}`).join('&') : null;\n\n    const url = `${scheme}://${host}/${options.path}${paramStr ? (`?${paramStr}`) : ''}`;\n\n    this.hooks = {\n      url,\n      isInitialized() {\n        return !!window.WebSocket;\n      },\n      getSocket(socketUrl) {\n        return new WebSocket(socketUrl);\n      },\n    };\n    this.name = name;\n  }\n\n  connect(callback: UndescribedCallbackFunction) {\n    let connected = false;\n\n    const transport = new TransportConnection(\n      this.hooks, this.name,\n    );\n\n    const onInitialized = () => {\n      transport.unbind(NamesDict.INITIALIZED, onInitialized);\n      transport.connect();\n    };\n\n    const unbindListeners = () => {\n      transport.unbind(NamesDict.INITIALIZED, onInitialized);\n      // eslint-disable-next-line no-use-before-define\n      transport.unbind(NamesDict.OPEN, onOpen);\n      // eslint-disable-next-line no-use-before-define\n      transport.unbind(NamesDict.ERROR, onError);\n      // eslint-disable-next-line no-use-before-define\n      transport.unbind(NamesDict.CLOSED, onClosed);\n    };\n\n    const onOpen = () => {\n      connected = true;\n      unbindListeners();\n      const result = new Connection('', transport);\n      callback(null, result);\n    };\n\n    const onError = (error: any) => {\n      unbindListeners();\n      callback(error);\n    };\n\n    const onClosed = () => {\n      unbindListeners();\n    };\n\n    transport.bind(NamesDict.INITIALIZED, onInitialized);\n    transport.bind(NamesDict.OPEN, onOpen);\n    transport.bind(NamesDict.ERROR, onError);\n    transport.bind(NamesDict.CLOSED, onClosed);\n\n    transport.initialize();\n\n    return {\n      abort: () => {\n        if (connected) {\n          return;\n        }\n        unbindListeners();\n        transport.close();\n      },\n    };\n  }\n}\n","import { UndescribedCallbackFunction } from '../types';\nimport {\n  IAction,\n  IConnectionCallbacks,\n  IErrorCallbacks,\n} from './types';\nimport EventsDispatcher from '../eventdispatcher/EventsDispatcher';\nimport Transport, { IRunner, ITransport } from '../transport/Transport';\nimport Connection from './Connection';\nimport { ISFSocketConfig, ISFSocketEvent, SFSocketEventType } from '../SFSocket';\n\nimport { NamesDict } from '../eventdispatcher/events';\n\nexport type ConnectionState = 'initialized'\n    | NamesDict.UNAVAILABLE\n    | NamesDict.CONNECTING\n    | NamesDict.CONNECTED\n    | NamesDict.DISCONNECTED;\n\nexport interface ConnectionManagerEventMap {\n    [NamesDict.CONNECTING]: ISFSocketEvent,\n    [NamesDict.DISCONNECTED]: undefined,\n    [NamesDict.CONNECTED]: undefined,\n    [NamesDict.CHANNEL_JOINED]: string[],\n    [NamesDict.CHANNEL_JOIN_FAILED]: string[],\n    [NamesDict.CHANNEL_LEFT]: string[],\n    [NamesDict.ERROR]: ISFSocketEvent,\n    [NamesDict.MESSAGE]: ISFSocketEvent,\n    [NamesDict.CLOSED]: ISFSocketEvent,\n    [NamesDict.UNAVAILABLE]: undefined,\n}\n\nexport default class ConnectionManager extends EventsDispatcher<ConnectionManagerEventMap> {\n    private options: ISFSocketConfig;\n\n    state: ConnectionState;\n\n    private connection: Connection | null;\n\n    private unavailableTimer: number;\n\n    private retryTimer: number;\n\n    private transport: ITransport;\n\n    private runner: IRunner | null;\n\n    private errorCallbacks: IErrorCallbacks;\n\n    private connectionCallbacks: IConnectionCallbacks;\n\n    constructor(options: ISFSocketConfig) {\n      super();\n      this.options = options || {};\n      this.state = 'initialized';\n      this.connection = null;\n\n      this.errorCallbacks = this.buildErrorCallbacks();\n      this.connectionCallbacks = this.buildConnectionCallbacks(this.errorCallbacks);\n\n      this.transport = new Transport(\n        'ws',\n        options,\n      );\n      this.runner = null;\n\n      this.unavailableTimer = 0;\n      this.retryTimer = 0;\n    }\n\n    connect() {\n      if (this.connection || this.runner) {\n        return;\n      }\n      this.updateState(NamesDict.CONNECTING);\n      this.startConnecting();\n      this.setUnavailableTimer();\n    }\n\n    send(data: string) {\n      if (this.connection) {\n        return this.connection.send(data);\n      }\n      return false;\n    }\n\n    sendCommand(name: string, data: any) {\n      if (this.connection) {\n        return this.connection.sendCommand(name, data);\n      }\n      return false;\n    }\n\n    sendJoin(channels: string[]) {\n      if (this.connection) {\n        this.connection.sendJoin(channels);\n      }\n      return false;\n    }\n\n    sendLeave(channels: string[]) {\n      if (this.connection) {\n        this.connection.sendLeave(channels);\n      }\n      return false;\n    }\n\n    disconnect() {\n      this.disconnectInternally();\n      this.updateState(NamesDict.DISCONNECTED);\n    }\n\n    public isConnected() {\n      return this.state === NamesDict.CONNECTED;\n    }\n\n    private startConnecting() {\n      const callback: UndescribedCallbackFunction = (error: Error | undefined | null, connection: Connection) => { // TODO\n        if (error) {\n          this.runner = this.transport.connect(callback);\n        } else {\n          this.abortConnecting();\n\n          this.clearUnavailableTimer();\n          this.setConnection(connection);\n          this.updateState(NamesDict.CONNECTED);\n        }\n      };\n      this.runner = this.transport.connect(callback);\n    }\n\n    private abortConnecting() {\n      if (this.runner) {\n        this.runner.abort();\n        this.runner = null;\n      }\n    }\n\n    private disconnectInternally() {\n      this.abortConnecting();\n      this.clearRetryTimer();\n      this.clearUnavailableTimer();\n      if (this.connection) {\n        const connection = this.abandonConnection();\n        if (connection) connection.close();\n      }\n    }\n\n    private retryIn(delay: number) {\n      if (delay > 0) {\n        this.emit(NamesDict.CONNECTING, {\n          type: SFSocketEventType.CONNECTING,\n          data: String(Math.round(delay / 1000)),\n          error: null,\n        });\n      }\n      this.retryTimer = setTimeout(() => {\n        this.disconnectInternally();\n        this.connect();\n      }, delay || 0);\n    }\n\n    private clearRetryTimer() {\n      if (this.retryTimer) {\n        if (this.retryTimer) {\n          clearTimeout(this.retryTimer);\n        }\n        this.retryTimer = 0;\n      }\n    }\n\n    private setUnavailableTimer() {\n      this.unavailableTimer = setTimeout(\n        () => {\n          this.updateState(NamesDict.UNAVAILABLE);\n        },\n        this.options.unavailableTimeout,\n      );\n    }\n\n    private clearUnavailableTimer() {\n      if (this.unavailableTimer) {\n        clearTimeout(this.unavailableTimer);\n      }\n      this.unavailableTimer = 0;\n    }\n\n    private buildConnectionCallbacks(errorCallbacks: IErrorCallbacks): IConnectionCallbacks {\n      return {\n        ...errorCallbacks,\n        message: (socketEvent: ISFSocketEvent) => {\n          // includes pong messages from server\n          this.emit(NamesDict.MESSAGE, socketEvent);\n        },\n        error: (errorEvent: ISFSocketEvent) => {\n          // just emit error to user - socket will already be closed by browser\n          this.emit(NamesDict.ERROR, errorEvent);\n        },\n        closed: (closeEvent: ISFSocketEvent) => {\n          this.abandonConnection();\n          if (this.shouldRetry()) {\n            this.retryIn(1000);\n          }\n          this.emit(NamesDict.CLOSED, closeEvent);\n        },\n        channelJoined: ((channels) => this.emit(NamesDict.CHANNEL_JOINED, channels)),\n        channelJoinFailed: ((channels) => this.emit(NamesDict.CHANNEL_JOIN_FAILED, channels)),\n        channelLeft: ((channels) => this.emit(NamesDict.CHANNEL_LEFT, channels)),\n      };\n    }\n\n    private buildErrorCallbacks(): IErrorCallbacks {\n      const withErrorEmitted = (callback: UndescribedCallbackFunction) => (result: IAction) => {\n        if (result.error) {\n          this.emit(NamesDict.ERROR, {\n            type: SFSocketEventType.ERROR,\n            data: null,\n            error: result.error,\n          });\n        }\n        callback(result);\n      };\n\n      return {\n        refused: withErrorEmitted(() => {\n          this.disconnect();\n        }),\n        unavailable: withErrorEmitted(() => {\n          this.retryIn(1000);\n        }),\n      };\n    }\n\n    private setConnection(connection: Connection | null) {\n      this.connection = connection;\n      if (!this.connection) {\n        return;\n      }\n      this.connection.bind(NamesDict.MESSAGE, this.connectionCallbacks.message);\n      this.connection.bind(NamesDict.CHANNEL_LEFT, this.connectionCallbacks.channelLeft);\n      this.connection.bind(NamesDict.CHANNEL_JOIN_FAILED, this.connectionCallbacks.channelJoinFailed);\n      this.connection.bind(NamesDict.CHANNEL_JOINED, this.connectionCallbacks.channelJoined);\n      this.connection.bind(NamesDict.ERROR, this.connectionCallbacks.error);\n      this.connection.bind(NamesDict.CLOSED, this.connectionCallbacks.closed);\n    }\n\n    private abandonConnection() {\n      if (!this.connection) {\n        return null;\n      }\n      this.connection.unbind(NamesDict.MESSAGE, this.connectionCallbacks.message);\n      this.connection.unbind(NamesDict.CHANNEL_LEFT, this.connectionCallbacks.channelLeft);\n      this.connection.unbind(NamesDict.CHANNEL_JOIN_FAILED, this.connectionCallbacks.channelJoinFailed);\n      this.connection.unbind(NamesDict.CHANNEL_JOINED, this.connectionCallbacks.channelJoined);\n      this.connection.unbind(NamesDict.ERROR, this.connectionCallbacks.error);\n      this.connection.unbind(NamesDict.CLOSED, this.connectionCallbacks.closed);\n\n      const { connection } = this;\n      this.connection = null;\n\n      return connection;\n    }\n\n    private updateState(newState: NamesDict.UNAVAILABLE\n        | NamesDict.CONNECTING\n        | NamesDict.CONNECTED\n        | NamesDict.DISCONNECTED) {\n      const previousState = this.state;\n      this.state = newState;\n      if (previousState !== newState) {\n        this.emit(newState, undefined);\n      }\n    }\n\n    private shouldRetry(): boolean {\n      return this.state === NamesDict.CONNECTING || this.state === NamesDict.CONNECTED;\n    }\n}\n","import { ISFSocketConfig } from './SFSocket';\n\nexport const defaultConfig: ISFSocketConfig = {\n  host: '',\n  port: 80,\n  path: '',\n  unavailableTimeout: 10000,\n  useTLS: false,\n};\n","import { UEventCallback } from './types';\nimport Channel from './Channel';\nimport ConnectionManager, { ConnectionManagerEventMap } from './connection/ConnectionManager';\nimport { defaultConfig } from './constants';\nimport { NamesDict } from './eventdispatcher/events';\n\nexport interface IChannels {\n  [name: string]: Channel;\n}\n\n// TODO: why do we even need 'sfSocket' prefix and not just reuse type\nexport enum SFSocketEventType {\n  CONNECTING='sfSocket:connecting',\n  MESSAGE='sfSocket:message',\n  CHANNEL_JOINED='channel_joined',\n  CHANNEL_JOIN_FAILED='channel_join_failed',\n  CHANNEL_LEFT='channel_left',\n  CHANNEL_LEAVE_FAILED='channel_leave_failed',\n  ERROR='sfSocket:error',\n  CLOSED='sfSocket:closed',\n}\n\n\nexport interface ISFSocketConfig {\n  host: string,\n  port: string | number;\n  path: string;\n  queryParams?: {[key: string]: string};\n  unavailableTimeout?: number;\n  useTLS?: boolean;\n}\n\nexport interface ISFSocketEvent {\n  type: SFSocketEventType,\n  data: string | null,\n  error: string | null,\n  context?: {\n    channel?: string,\n    code?: string | number,\n  } | null\n}\n\nexport class SFSocket {\n  static instances: SFSocket[] = [];\n\n  static isReady: boolean = false;\n\n  static ready() {\n    SFSocket.isReady = true;\n\n    SFSocket.instances.forEach((instance) => {\n      instance.connect();\n    });\n  }\n\n  private config: ISFSocketConfig;\n\n  channels: IChannels = {};\n\n  cMgr: ConnectionManager;\n\n  constructor(options?: ISFSocketConfig) {\n    if (!options || typeof options !== 'object') {\n      throw new Error('sfSocket options should be an object');\n    }\n\n    const constructorOptions = options || {};\n\n    this.config = {\n      ...defaultConfig,\n      port: constructorOptions.useTLS ? 443 : 80,\n      ...constructorOptions,\n    };\n\n    this.cMgr = new ConnectionManager(this.config);\n\n    this.cMgr.bind(NamesDict.CONNECTED, () => {\n      Object.values(this.channels).forEach((channel) => {\n        channel.join(); // Send join command again on connect\n      });\n    });\n\n    this.cMgr.bind(NamesDict.ERROR, (err: ISFSocketEvent) => {\n      console.error(err); // eslint-disable-line no-console\n    });\n\n    SFSocket.instances.push(this);\n\n    if (SFSocket.isReady) {\n      this.connect();\n    }\n  }\n\n  connect() {\n    this.cMgr.connect();\n  }\n\n  disconnect() {\n    this.cMgr.disconnect();\n  }\n\n  /**\n   * Send custom command to server\n   * @param cmdName - string name of command\n   * @param data - serializable payload for data\n   */\n  sendCommand(cmdName: string, data: any) {\n    return this.cMgr.sendCommand(cmdName, data);\n  }\n\n  joinChannelList(channelsNames: string[]) {\n    channelsNames.forEach((channelsName) => {\n      this.joinChannel(channelsName);\n    });\n  }\n\n  leaveChannelList(channelNames: string[]) {\n    channelNames.forEach((channelName) => {\n      this.leaveChannel(channelName);\n    });\n  }\n\n  /**\n   * Subscribe to event globally\n   * @param eventName\n   * @param callback\n   * @param channel - optional channel to monitor. Note subscribing to channel here is not creating auto-rejoinable channel.\n   * Join channel explicitly to make it auto-rejoinable\n   */\n  subscribe<K extends keyof ConnectionManagerEventMap>(eventName: K, callback: UEventCallback<ConnectionManagerEventMap, K>, channel?: string) {\n    return this.cMgr.bind(eventName, callback, channel);\n  }\n\n  /**\n   * Unsubscribe from event globally\n   * @param eventName\n   * @param callback\n   * @param channel - optional channel to monitor. Note subscribing to channel here is not creating auto-rejoinable channel.\n   * Join channel explicitly to make it auto-rejoinable\n   */\n  unsubscribe<K extends keyof ConnectionManagerEventMap>(eventName: K, callback: UEventCallback<ConnectionManagerEventMap, K>, channel?: string) {\n    return this.cMgr.unbind(eventName, callback, channel);\n  }\n\n  joinChannel(chanelName: string) {\n    if (this.channels[chanelName]) {\n      throw new Error(`Channel ${chanelName} already exists`);\n    }\n    this.channels[chanelName] = new Channel(chanelName, this);\n    return this.channels[chanelName];\n  }\n\n  leaveChannel(chanelName: string) {\n    if (!this.channels[chanelName]) {\n      throw new Error(`Channel ${chanelName} does not exist`);\n    }\n    const channel = this.channels[chanelName];\n    channel.leave();\n    delete this.channels[chanelName];\n    return channel;\n  }\n\n  getChannel(name: string): Channel {\n    return this.channels[name];\n  }\n}\n","import { SFSocket } from './SFSocket';\nimport { NamesDict as eventNames } from './eventdispatcher/events';\n\nconst makeSocketOptions = (wsUrl: string) => {\n  const url = new URL(wsUrl);\n  const urlProtocol = url.protocol ? url.protocol.replace(':', '') : null;\n\n  if (url.hostname && url.port && urlProtocol) {\n    return {\n      host: url.hostname, // host: 'localhost',\n      port: url.port, // port: '8080',\n      path: urlProtocol, // path: 'ws',\n    };\n  }\n\n  return null;\n};\n\nexport { SFSocket, makeSocketOptions, eventNames };\nexport default SFSocket;\n"],"sourceRoot":""}