{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/Channel.ts","webpack:///./lib/eventdispatcher/CallbackRegistry.ts","webpack:///./lib/eventdispatcher/EventsDispatcher.ts","webpack:///./lib/messageCodingUtils.ts","webpack:///./lib/eventdispatcher/events.ts","webpack:///./lib/connection/Connection.ts","webpack:///./lib/transport/TransportConnection.ts","webpack:///./lib/transport/Transport.ts","webpack:///./lib/connection/ConnectionManager.ts","webpack:///./lib/constants.ts","webpack:///./lib/SFSocket.ts","webpack:///./lib/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Channel","socket","this","subscribed","subscriptionCancelled","event","data","console","warn","sendEvent","joinChannel","eventName","callback","subscribe","unsubscribe","leaveChannel","CallbackRegistry","callbacks","channel","push","fn","names","keys","removeCallback","removeAllCallbacks","forEach","filter","existedCallback","isEqualCallback","isEqualChannel","add","remove","channelEvent","variableToCheck","context","length","isChannelCallback","systemSymbols","NamesDict","id","transport","super","bindListeners","send","type","error","sfEvent","cmd","args","JSON","stringify","encodeMessage","close","unbindListeners","listeners","unbind","MESSAGE","message","ERROR","CLOSED","closed","messageEvent","sfSocketEvent","messageData","parse","calcChannelName","topic","resultTopic","symbol","String","payload","decodeMessage","e","emit","closeEvent","code","handleCloseEvent","action","prepareCloseAction","hooks","initialize","self","isInitialized","changeState","INITIALIZED","onClose","state","url","getSocket","setTimeout","onError","onClosed","CONNECTING","onopen","onerror","onclose","onmessage","OPEN","wasClean","reason","undefined","onOpen","onMessage","params","options","useTLS","host","portTLS","port","path","window","WebSocket","socketUrl","connected","onInitialized","connect","result","abort","connection","usingTLS","Boolean","errorCallbacks","buildErrorCallbacks","connectionCallbacks","buildConnectionCallbacks","runner","unavailableTimer","retryTimer","updateState","startConnecting","setUnavailableTimer","disconnectInternally","DISCONNECTED","CONNECTED","abortConnecting","clearUnavailableTimer","setConnection","clearRetryTimer","abandonConnection","delay","Math","round","clearTimeout","UNAVAILABLE","unavailableTimeout","socketEvent","errorEvent","shouldRetry","retryIn","withErrorEmitted","refused","disconnect","unavailable","newState","previousState","defaultConfig","useStorage","CONNECTION_EVENTS","Error","constructorOptions","config","channels","eventsDispatcher","hasStorage","localStorage","channelName","subscribeChannel","channelsDisconnect","err","instances","isReady","activeChannels","getStorage","instance","channelsNames","channelsName","isConnected","channelNames","removedChannel","removeChannel","chanelName","addStorageChannel","removeStorageChannel","values","addChannel","reinstateSubscription","join","storageData","getItem","activeStorageChannels","setStorage","activeStorage","currentData","clearStorage","setItem","removeItem","makeSocketOptions","wsUrl","URL","urlProtocol","protocol","replace","hostname"],"mappings":"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","file":"socket.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import { UEventCallback } from './types';\nimport { SFSocket } from './SFSocket';\nimport { ConnectionManagerEventMap } from './connection/ConnectionManager';\n\nexport default class Channel {\n  name: string;\n\n  socket: SFSocket;\n\n  subscribed: boolean;\n\n  subscriptionCancelled: boolean;\n\n  constructor(name: string, socket: SFSocket) {\n    this.name = name;\n    this.socket = socket;\n    this.subscribed = false;\n    this.subscriptionCancelled = false;\n  }\n\n  trigger(event: string, data: string[]) { // TODO\n    if (!this.subscribed) {\n      console.warn('Client event triggered before channel \\'subscription_succeeded\\' event'); // eslint-disable-line no-console\n    }\n    return this.socket.sendEvent(event, data, this.name);\n  }\n\n  disconnect() {\n    this.subscribed = false;\n  }\n\n  join() {\n    if (this.subscribed) return;\n    this.subscriptionCancelled = false;\n    this.subscribed = true;\n    this.socket.joinChannel(this.name);\n  }\n\n  subscribe<K extends keyof ConnectionManagerEventMap>(eventName: K, callback: UEventCallback<ConnectionManagerEventMap, K>) {\n    this.socket.subscribe(eventName, callback, this.name);\n  }\n\n  unsubscribe<K extends keyof ConnectionManagerEventMap>(eventName: K, callback: UEventCallback<ConnectionManagerEventMap, K>) {\n    this.socket.unsubscribe(eventName, callback, this.name);\n  }\n\n  leaveChannel() {\n    this.subscribed = false;\n    this.socket.leaveChannel(this.name);\n  }\n\n  cancelSubscription() {\n    this.subscriptionCancelled = true;\n  }\n\n  reinstateSubscription() {\n    this.subscriptionCancelled = false;\n  }\n}\n","import {\n  ICallback, ICallbackTable, UEventCallback,\n} from '../types';\n\nexport default class CallbackRegistry<EventMap> {\n    callbacks: ICallbackTable<EventMap> = {};\n\n    get<K extends keyof EventMap>(name: K): ICallback[] {\n      const results = this.callbacks[name];\n      return (results || [])!; // TODO: Why TS wants '!' here?\n    }\n\n    add<K extends keyof EventMap>(name: K, callback: UEventCallback<EventMap, K>, channel?: string) {\n      if (!this.callbacks[name]) {\n        this.callbacks[name] = [];\n      }\n        this.callbacks[name]!.push({\n          fn: callback,\n          channel: channel || null,\n        });\n    }\n\n    remove<K extends keyof EventMap>(name: K, callback: UEventCallback<EventMap, K>, channel?: string) {\n      if (!name && !callback && !channel) {\n        this.callbacks = {};\n        return;\n      }\n\n      const names: K[] = name ? [name] : Object.keys(this.callbacks) as K[];\n\n      if (callback || channel) {\n        this.removeCallback(names, callback, channel);\n      } else {\n        this.removeAllCallbacks(names);\n      }\n    }\n\n    private removeCallback<K extends keyof EventMap>(names: K[], callback?: UEventCallback<EventMap, K>, channel?: string) {\n      names.forEach((name) => {\n        const callbacks: Array<ICallback<UEventCallback<EventMap, K>>> = (this.callbacks[name] || [])!; // TODO: Why TS wants '!' here?\n        this.callbacks[name] = callbacks.filter(\n          (existedCallback: ICallback) => {\n            const isEqualCallback = callback && callback === existedCallback.fn;\n            const isEqualChannel = channel && channel === existedCallback.channel;\n            return !isEqualCallback && !isEqualChannel;\n          },\n        );\n      });\n    }\n\n    private removeAllCallbacks<K extends keyof EventMap>(names: K[]) {\n      names.forEach((name) => {\n        delete this.callbacks[name];\n      });\n    }\n}\n","import { UEventCallback, ICallback } from '../types';\nimport CallbackRegistry from './CallbackRegistry';\n\nexport interface EventWithChannel {\n  context: { channel: string }\n}\n\nconst isEventWithChannel = (variableToCheck: any): variableToCheck is EventWithChannel => (\n  variableToCheck && variableToCheck.context\n    && typeof variableToCheck.context.channel === 'string'\n);\n\nexport default class EventsDispatcher<EventMap> {\n  callbacks: CallbackRegistry<EventMap> = new CallbackRegistry<EventMap>();\n\n  bind<K extends keyof EventMap>(eventName: K, callback: UEventCallback<EventMap, K>, channel?: string) {\n    this.callbacks.add(eventName, callback, channel);\n    return this;\n  }\n\n  unbind<K extends keyof EventMap>(eventName: K, callback: UEventCallback<EventMap, K>, channel?: string) {\n    this.callbacks.remove(eventName, callback, channel);\n    return this;\n  }\n\n  emit<K extends keyof EventMap>(eventName: K, event: EventMap[K]) : EventsDispatcher<EventMap> {\n    const callbacks = this.callbacks.get(eventName);\n\n    const channelEvent: string | null = isEventWithChannel(event) ? event.context.channel\n      : null;\n\n    const hasCallbacks = callbacks && callbacks.length > 0;\n\n    if (hasCallbacks) {\n      callbacks.forEach((callback: ICallback) => {\n        const isChannelCallback = callback.channel === channelEvent;\n        const isGlobalCallback = !callback.channel || !channelEvent;\n\n        if (isGlobalCallback || isChannelCallback) {\n          callback.fn(event);\n        }\n      });\n    }\n\n    return this;\n  }\n}\n","import { ISFSocketEvent } from './SFSocket';\n\nconst systemSymbols = ['@'];\n\nexport const decodeMessage = (messageEvent: string): ISFSocketEvent => {\n  if (messageEvent) {\n    const messageData = JSON.parse(messageEvent);\n\n    const calcChannelName = (topic: string) => {\n      let resultTopic = topic;\n\n      systemSymbols.forEach((symbol) => {\n        if (topic && topic[0] === symbol) {\n          resultTopic = '';\n        }\n      });\n\n      return String(resultTopic);\n    };\n\n    return {\n      type: 'sfSocket:message',\n      error: null,\n      data: messageData.payload || null,\n      context: {\n        ...(messageData.topic ? { channel: calcChannelName(messageData.topic) } : {}),\n      },\n    };\n  }\n\n  return {\n    type: 'MessageParseError',\n    error: `MessageEvent: ${messageEvent} not contains data property`,\n    data: null,\n  };\n};\n\nexport const encodeMessage = (event: ISFSocketEvent): string => {\n  const sfEvent = {\n    cmd: event.type,\n    args: event.data,\n  };\n\n  return JSON.stringify(sfEvent);\n};\n\n/**\n * See:\n * 1. https://developer.mozilla.org/en-US/docs/WebSockets/WebSockets_reference/CloseEvent\n */\nexport const prepareCloseAction = (closeEvent: ISFSocketEvent): ISFSocketEvent => {\n  if (!closeEvent.context || !closeEvent.context.code) {\n    console.error('Socket event do not contain close code'); // eslint-disable-line no-console\n\n    return {\n      ...closeEvent,\n      error: 'Connection refused',\n    };\n  }\n\n  if (closeEvent.context.code < 4000) {\n    // ignore 1000 CLOSE_NORMAL, 1001 CLOSE_GOING_AWAY,\n    //        1005 CLOSE_NO_STATUS, 1006 CLOSE_ABNORMAL\n    // ignore 1007...3999\n    // handle 1002 CLOSE_PROTOCOL_ERROR, 1003 CLOSE_UNSUPPORTED,\n    //        1004 CLOSE_TOO_LARGE\n    if (closeEvent.context.code >= 1002 && closeEvent.context.code <= 1004) {\n      return {\n        ...closeEvent,\n        error: 'Socket is unavailable',\n      };\n    }\n  }\n\n  return closeEvent;\n};\n","/**\n * Dictionary of event names used across everywhere\n */\nexport enum NamesDict {\n  CONNECTED= 'connected',\n  MESSAGE='message',\n  CONNECTING='connecting',\n  DISCONNECTED='disconnected',\n  ERROR='error',\n  OPEN='open',\n  INITIALIZED='initialized',\n  CLOSED='closed',\n  UNAVAILABLE='unavailable',\n}\n","import EventsDispatcher from '../eventdispatcher/EventsDispatcher';\nimport { ISFSocketEvent } from '../SFSocket';\nimport TransportConnection from '../transport/TransportConnection';\nimport { decodeMessage, encodeMessage, prepareCloseAction } from '../messageCodingUtils';\nimport { NamesDict } from '../eventdispatcher/events';\n\n/**\n * Lists events that can be emitted by `Connection` class\n */\nexport interface ConnectionEventMap {\n  [NamesDict.CLOSED]: ISFSocketEvent,\n  [NamesDict.ERROR]: ISFSocketEvent,\n  [NamesDict.MESSAGE]: ISFSocketEvent,\n}\n\n\nexport interface EventWithCode {\n  context: { code: string }\n}\n\nconst isEventWithCode = (variableToCheck: any): variableToCheck is EventWithCode => (\n  variableToCheck.context\n    && typeof variableToCheck.context.code !== 'undefined'\n);\n\nexport default class Connection extends EventsDispatcher<ConnectionEventMap> {\n  id: string;\n\n  transport: TransportConnection | null;\n\n  constructor(id : string, transport : TransportConnection) {\n    super();\n    this.id = id;\n    this.transport = transport;\n    this.bindListeners();\n  }\n\n  send(data : string) : boolean {\n    if (!this.transport) return false;\n    return this.transport.send(data);\n  }\n\n  sendEvent(name: string, data: any, channel?: string) : boolean {\n    const event: ISFSocketEvent = {\n      type: name,\n      data,\n      error: null,\n    };\n\n    if (channel) {\n      event.context = { channel };\n    }\n\n    return this.send(encodeMessage(event));\n  }\n\n  close() {\n    if (this.transport) {\n      this.transport.close();\n    }\n  }\n\n  private bindListeners() {\n    const unbindListeners = (listeners: any) => { // TODO\n      if (!this.transport) return;\n      this.transport.unbind(NamesDict.MESSAGE, listeners.message);\n      this.transport.unbind(NamesDict.ERROR, listeners.error);\n      this.transport.unbind(NamesDict.CLOSED, listeners.closed);\n    };\n\n    const listeners = {\n      message: (messageEvent: ISFSocketEvent) => {\n        let sfSocketEvent = null;\n        try {\n          sfSocketEvent = decodeMessage(messageEvent.data!);\n        } catch (e) {\n          this.emit(NamesDict.ERROR, {\n            type: 'MessageParseError',\n            error: e,\n            data: JSON.stringify(messageEvent),\n          });\n        }\n\n        if (sfSocketEvent) {\n          if (sfSocketEvent.type === 'sfSocket:error') {\n            this.emit(NamesDict.ERROR, {\n              type: 'sfSocket:error',\n              data: sfSocketEvent.data,\n              error: null,\n            });\n          } else {\n            this.emit(NamesDict.MESSAGE, sfSocketEvent);\n          }\n        }\n      },\n      error: (error: ISFSocketEvent) => {\n        this.emit(NamesDict.ERROR, {\n          ...error,\n          type: 'sfSocket:error',\n          data: null, // TODO: Are these overrides needed? Check what's being sent here\n        });\n      },\n      closed: (closeEvent: ISFSocketEvent) => { // TODO\n        unbindListeners(listeners);\n\n        if (isEventWithCode(closeEvent)) {\n          this.handleCloseEvent(closeEvent);\n        }\n\n        this.transport = null;\n        this.emit(NamesDict.CLOSED, closeEvent);\n      },\n    };\n\n    if (!this.transport) return;\n    this.transport.bind(NamesDict.MESSAGE, listeners.message);\n    this.transport.bind(NamesDict.ERROR, listeners.error);\n    this.transport.bind(NamesDict.CLOSED, listeners.closed);\n  }\n\n  private handleCloseEvent(closeEvent : ISFSocketEvent) {\n    const action = prepareCloseAction(closeEvent);\n\n    if (action.type === 'sfSocket:closed') {\n      this.emit(NamesDict.CLOSED, action);\n    } else {\n      this.emit(NamesDict.ERROR, action);\n    }\n  }\n}\n","import EventsDispatcher from '../eventdispatcher/EventsDispatcher';\nimport { ISFSocketConfig, ISFSocketEvent } from '../SFSocket';\nimport { NamesDict } from '../eventdispatcher/events';\n\nexport interface ITransportHooks {\n  url: string;\n  isInitialized(): boolean;\n  getSocket(url: string, options?: ISFSocketConfig): WebSocket;\n}\n\n\n/**\n * Lists events that can be emitted by `TransportConnection` class\n */\nexport interface TransportEventMap {\n  [NamesDict.INITIALIZED]: undefined,\n  [NamesDict.ERROR]: ISFSocketEvent,\n  [NamesDict.MESSAGE]: ISFSocketEvent,\n  [NamesDict.CLOSED]: ISFSocketEvent,\n  [NamesDict.OPEN]: undefined,\n  [NamesDict.CONNECTING]: undefined,\n}\n\nexport default class TransportConnection extends EventsDispatcher<TransportEventMap> {\n  hooks: ITransportHooks;\n\n  name: string;\n\n  state: string;\n\n  socket?: WebSocket;\n\n  initialize: Function;\n\n  constructor(hooks: ITransportHooks, name: string) {\n    super();\n    this.initialize = () => {\n      const self = this;\n\n      if (self.hooks.isInitialized()) {\n        self.changeState(NamesDict.INITIALIZED);\n      } else {\n        self.onClose();\n      }\n    };\n    this.hooks = hooks;\n    this.name = name;\n\n    this.state = 'new';\n  }\n\n  connect() : boolean {\n    if (this.socket || this.state !== 'initialized') {\n      return false;\n    }\n\n    const { url } = this.hooks;\n    try {\n      this.socket = this.hooks.getSocket(url);\n    } catch (e) {\n      // Workaround for MobileSafari bug (see https://gist.github.com/2052006)\n      setTimeout(() => {\n        this.onError(e);\n        this.onClosed({\n          type: 'sfSocket:error',\n          data: null,\n          error: e,\n          context: {},\n        });\n      });\n      return false;\n    }\n\n    this.bindListeners();\n    this.changeState(NamesDict.CONNECTING);\n    return true;\n  }\n\n  /** Closes the connection.\n   *\n   * @return {Boolean} true if there was a connection to close\n   */\n  close() : boolean {\n    if (this.socket) {\n      this.socket.close();\n      return true;\n    }\n    return false;\n  }\n\n  send(data : any) : boolean { // TODO\n    if (this.state === 'open') {\n      // Workaround for MobileSafari bug (see https://gist.github.com/2052006)\n      setTimeout(() => {\n        if (this.socket) {\n          this.socket.send(data);\n        }\n      });\n      return true;\n    }\n    return false;\n  }\n\n  private unbindListeners() {\n    if (!this.socket) return;\n    this.socket.onopen = null;\n    this.socket.onerror = null;\n    this.socket.onclose = null;\n    this.socket.onmessage = null;\n  }\n\n\n  private onOpen() {\n    this.changeState(NamesDict.OPEN);\n    if (!this.socket) return;\n    this.socket.onopen = null;\n  }\n\n  private onError(error?: string) {\n    this.emit(NamesDict.ERROR, {\n      type: 'sfSocket:error',\n      error: error || 'websocket connection error',\n      data: null,\n    });\n  }\n\n  private onClose(closeEvent?: CloseEvent) {\n    if (closeEvent) {\n      this.onClosed({\n        type: closeEvent.wasClean ? 'sfSocket:closed' : 'sfSocket:error',\n        data: closeEvent.wasClean ? closeEvent.reason : null,\n        error: closeEvent.wasClean ? null : closeEvent.reason,\n        context: {\n          code: closeEvent.code,\n        },\n      });\n    } else {\n      this.onClosed({\n        type: 'sfSocket:closed',\n        data: null,\n        error: 'Closed for unknown reason',\n        context: {},\n      });\n    }\n    this.unbindListeners();\n    this.socket = undefined;\n  }\n\n  private onMessage(message: MessageEvent) {\n    this.emit(NamesDict.MESSAGE, {\n      type: 'sfSocket:message',\n      data: typeof message.data === 'string' ? message.data : JSON.stringify(message.data),\n      error: null,\n    });\n  }\n\n  private bindListeners() {\n    if (!this.socket) return;\n    this.socket.onopen = () => {\n      this.onOpen();\n    };\n    this.socket.onerror = () => {\n      this.onError();\n    };\n    this.socket.onclose = (closeEvent: CloseEvent) => {\n      this.onClose(closeEvent);\n    };\n    this.socket.onmessage = (message: MessageEvent) => {\n      this.onMessage(message);\n    };\n  }\n\n  private changeState(state: NamesDict.OPEN | NamesDict.CONNECTING | NamesDict.INITIALIZED) {\n    this.state = state;\n    this.emit(state, undefined);\n  }\n\n  private onClosed(params: ISFSocketEvent) {\n    this.state = NamesDict.CLOSED;\n    this.emit(NamesDict.CLOSED, params);\n  }\n}\n","import { UndescribedCallbackFunction } from '../types';\nimport Connection from '../connection/Connection';\nimport TransportConnection, { ITransportHooks } from './TransportConnection';\nimport { ISFSocketConfig } from '../SFSocket';\nimport { NamesDict } from '../eventdispatcher/events';\n\nexport interface IRunner {\n  abort: () => void;\n}\n\nexport interface ITransport {\n  connect(callback: UndescribedCallbackFunction): IRunner;\n}\n\nexport default class Transport implements ITransport {\n  hooks: ITransportHooks;\n\n  name: string;\n\n  options: ISFSocketConfig;\n\n  constructor(name: string, options: ISFSocketConfig) {\n    this.options = options || {};\n\n    const scheme = `ws${options.useTLS ? 's' : ''}`;\n    const host = options.useTLS ? (`${options.host}:${options.portTLS}`) : (`${options.host}:${options.port}`);\n\n    const url = `${scheme}://${host}/${options.path}`;\n\n    this.hooks = {\n      url,\n      isInitialized() {\n        return !!window.WebSocket;\n      },\n      getSocket(socketUrl) {\n        return new WebSocket(socketUrl);\n      },\n    };\n    this.name = name;\n  }\n\n  connect(callback: UndescribedCallbackFunction) {\n    let connected = false;\n\n    const transport = new TransportConnection(\n      this.hooks, this.name,\n    );\n\n    const onInitialized = () => {\n      transport.unbind(NamesDict.INITIALIZED, onInitialized);\n      transport.connect();\n    };\n\n    const unbindListeners = () => {\n      transport.unbind(NamesDict.INITIALIZED, onInitialized);\n      // eslint-disable-next-line no-use-before-define\n      transport.unbind(NamesDict.OPEN, onOpen);\n      // eslint-disable-next-line no-use-before-define\n      transport.unbind(NamesDict.ERROR, onError);\n      // eslint-disable-next-line no-use-before-define\n      transport.unbind(NamesDict.CLOSED, onClosed);\n    };\n\n    const onOpen = () => {\n      connected = true;\n      unbindListeners();\n      const result = new Connection('', transport);\n      callback(null, result);\n    };\n\n    const onError = (error: any) => { // TODO\n      unbindListeners();\n      callback(error);\n    };\n\n    const onClosed = () => {\n      unbindListeners();\n    };\n\n    transport.bind(NamesDict.INITIALIZED, onInitialized);\n    transport.bind(NamesDict.OPEN, onOpen);\n    transport.bind(NamesDict.ERROR, onError);\n    transport.bind(NamesDict.CLOSED, onClosed);\n\n    transport.initialize();\n\n    return {\n      abort: () => {\n        if (connected) {\n          return;\n        }\n        unbindListeners();\n        transport.close();\n      },\n    };\n  }\n}\n","import { UndescribedCallbackFunction } from '../types';\nimport {\n  IAction,\n  IConnectionCallbacks,\n  IErrorCallbacks,\n} from './types';\nimport EventsDispatcher from '../eventdispatcher/EventsDispatcher';\nimport Transport, { IRunner, ITransport } from '../transport/Transport';\nimport Connection from './Connection';\nimport { ISFSocketConfig, ISFSocketEvent } from '../SFSocket';\n\nimport { NamesDict } from '../eventdispatcher/events';\n\nexport type ConnectionState = 'initialized'\n    | NamesDict.UNAVAILABLE\n    | NamesDict.CONNECTING\n    | NamesDict.CONNECTED\n    | NamesDict.DISCONNECTED;\n\nexport interface ConnectionManagerEventMap {\n    [NamesDict.CONNECTING]: ISFSocketEvent,\n    [NamesDict.DISCONNECTED]: undefined,\n    [NamesDict.CONNECTED]: undefined,\n    [NamesDict.ERROR]: ISFSocketEvent,\n    [NamesDict.MESSAGE]: ISFSocketEvent,\n    [NamesDict.CLOSED]: ISFSocketEvent,\n    [NamesDict.UNAVAILABLE]: undefined,\n}\n\nexport default class ConnectionManager extends EventsDispatcher<ConnectionManagerEventMap> {\n    options: ISFSocketConfig;\n\n    state: ConnectionState;\n\n    connection: Connection | null;\n\n    usingTLS: boolean;\n\n    unavailableTimer: number;\n\n    retryTimer: number;\n\n    transport: ITransport;\n\n    runner: IRunner | null;\n\n    errorCallbacks: IErrorCallbacks;\n\n    connectionCallbacks: IConnectionCallbacks;\n\n    constructor(options: ISFSocketConfig) {\n      super();\n      this.options = options || {};\n      this.state = 'initialized';\n      this.connection = null;\n      this.usingTLS = Boolean(options.useTLS);\n\n      this.errorCallbacks = this.buildErrorCallbacks();\n      this.connectionCallbacks = this.buildConnectionCallbacks(this.errorCallbacks);\n\n      this.transport = new Transport(\n        'ws',\n        options,\n      );\n      this.runner = null;\n\n      this.unavailableTimer = 0;\n      this.retryTimer = 0;\n    }\n\n    connect() {\n      if (this.connection || this.runner) {\n        return;\n      }\n      this.updateState(NamesDict.CONNECTING);\n      this.startConnecting();\n      this.setUnavailableTimer();\n    }\n\n    send(data: string) {\n      if (this.connection) {\n        return this.connection.send(data);\n      }\n      return false;\n    }\n\n    sendEvent(name: string, data: string[], channel?: string) {\n      if (this.connection) {\n        return this.connection.sendEvent(name, data, channel);\n      }\n      return false;\n    }\n\n    disconnect() {\n      this.disconnectInternally();\n      this.updateState(NamesDict.DISCONNECTED);\n    }\n\n    public isConnected() {\n      return this.state === NamesDict.CONNECTED;\n    }\n\n    private startConnecting() {\n      const callback: UndescribedCallbackFunction = (error: Error | undefined | null, connection: Connection) => { // TODO\n        if (error) {\n          this.runner = this.transport.connect(callback);\n        } else {\n          this.abortConnecting();\n\n          this.clearUnavailableTimer();\n          this.setConnection(connection);\n          this.updateState(NamesDict.CONNECTED);\n        }\n      };\n      this.runner = this.transport.connect(callback);\n    }\n\n    private abortConnecting() {\n      if (this.runner) {\n        this.runner.abort();\n        this.runner = null;\n      }\n    }\n\n    private disconnectInternally() {\n      this.abortConnecting();\n      this.clearRetryTimer();\n      this.clearUnavailableTimer();\n      if (this.connection) {\n        const connection = this.abandonConnection();\n        if (connection) connection.close();\n      }\n    }\n\n    private retryIn(delay: number) {\n      if (delay > 0) {\n        this.emit(NamesDict.CONNECTING, {\n          type: 'sfSocket:connecting',\n          data: String(Math.round(delay / 1000)),\n          error: null,\n        });\n      }\n      this.retryTimer = setTimeout(() => {\n        this.disconnectInternally();\n        this.connect();\n      }, delay || 0);\n    }\n\n    private clearRetryTimer() {\n      if (this.retryTimer) {\n        if (this.retryTimer) {\n          clearTimeout(this.retryTimer);\n        }\n        this.retryTimer = 0;\n      }\n    }\n\n    private setUnavailableTimer() {\n      this.unavailableTimer = setTimeout(\n        () => {\n          this.updateState(NamesDict.UNAVAILABLE);\n        },\n        this.options.unavailableTimeout,\n      );\n    }\n\n    private clearUnavailableTimer() {\n      if (this.unavailableTimer) {\n        clearTimeout(this.unavailableTimer);\n      }\n      this.unavailableTimer = 0;\n    }\n\n    private buildConnectionCallbacks(errorCallbacks: IErrorCallbacks): IConnectionCallbacks {\n      return {\n        ...errorCallbacks,\n        message: (socketEvent: ISFSocketEvent) => {\n          // includes pong messages from server\n          this.emit(NamesDict.MESSAGE, socketEvent);\n        },\n        error: (errorEvent: ISFSocketEvent) => {\n          // just emit error to user - socket will already be closed by browser\n          this.emit(NamesDict.ERROR, errorEvent);\n        },\n        closed: (closeEvent: ISFSocketEvent) => {\n          this.abandonConnection();\n          if (this.shouldRetry()) {\n            this.retryIn(1000);\n          }\n          this.emit(NamesDict.CLOSED, closeEvent);\n        },\n      };\n    }\n\n    private buildErrorCallbacks(): IErrorCallbacks {\n      const withErrorEmitted = (callback: UndescribedCallbackFunction) => (result: IAction) => {\n        if (result.error) {\n          this.emit(NamesDict.ERROR, {\n            type: 'sfSocket:error',\n            data: null,\n            error: result.error,\n          });\n        }\n        callback(result);\n      };\n\n      return {\n        refused: withErrorEmitted(() => {\n          this.disconnect();\n        }),\n        unavailable: withErrorEmitted(() => {\n          this.retryIn(1000);\n        }),\n      };\n    }\n\n    private setConnection(connection: Connection | null) {\n      this.connection = connection;\n      if (!this.connection) {\n        return;\n      }\n      this.connection.bind(NamesDict.MESSAGE, this.connectionCallbacks.message);\n      this.connection.bind(NamesDict.ERROR, this.connectionCallbacks.error);\n      this.connection.bind(NamesDict.CLOSED, this.connectionCallbacks.closed);\n    }\n\n    private abandonConnection() {\n      if (!this.connection) {\n        return null;\n      }\n      this.connection.unbind(NamesDict.MESSAGE, this.connectionCallbacks.message);\n      this.connection.unbind(NamesDict.ERROR, this.connectionCallbacks.error);\n      this.connection.unbind(NamesDict.CLOSED, this.connectionCallbacks.closed);\n\n      const { connection } = this;\n      this.connection = null;\n\n      return connection;\n    }\n\n    private updateState(newState: NamesDict.UNAVAILABLE\n        | NamesDict.CONNECTING\n        | NamesDict.CONNECTED\n        | NamesDict.DISCONNECTED) {\n      const previousState = this.state;\n      this.state = newState;\n      if (previousState !== newState) {\n        this.emit(newState, undefined);\n      }\n    }\n\n    private shouldRetry(): boolean {\n      return this.state === NamesDict.CONNECTING || this.state === NamesDict.CONNECTED;\n    }\n}\n","import { ISFSocketConfig } from './SFSocket';\n\nexport const defaultConfig: ISFSocketConfig = {\n  host: '',\n  port: 80,\n  portTLS: 443,\n  path: '',\n  unavailableTimeout: 10000,\n  useTLS: false,\n  useStorage: false,\n};\n\nexport const STORAGE_KEY = 'sfsocket_storage';\n","import { UEventCallback } from './types';\nimport Channel from './Channel';\nimport ConnectionManager, { ConnectionManagerEventMap } from './connection/ConnectionManager';\nimport { defaultConfig, STORAGE_KEY } from './constants';\nimport { NamesDict } from './eventdispatcher/events';\nimport EventsDispatcher from './eventdispatcher/EventsDispatcher';\n\nconst CONNECTION_EVENTS = {\n  JOIN: 'join',\n  LEAVE: 'leave',\n};\n\nexport interface IChannels {\n  [name: string]: Channel;\n}\n\n\nexport interface ISFSocketConfig {\n  host: string,\n  port: string | number;\n  portTLS?: string | number;\n  path: string;\n  unavailableTimeout?: number;\n  useTLS?: boolean;\n  useStorage?: boolean;\n}\n\nexport interface ISFSocketEvent {\n  type: string,\n  data: string | null,\n  error: string | null,\n  context?: {\n    channel?: string,\n    code?: string | number,\n  } | null\n}\n\nexport interface SFSocketEventMap {\n  [NamesDict.MESSAGE]: ISFSocketEvent\n}\n\nexport class SFSocket {\n  static instances: SFSocket[] = [];\n\n  static isReady: boolean = false;\n\n  static ready() {\n    SFSocket.isReady = true;\n\n    SFSocket.instances.forEach((instance) => {\n      instance.connect();\n    });\n  }\n\n  config: ISFSocketConfig;\n\n  channels: IChannels;\n\n  eventsDispatcher: EventsDispatcher<SFSocketEventMap>;\n\n  connection: ConnectionManager;\n\n  hasStorage: boolean;\n\n  constructor(options?: ISFSocketConfig) {\n    if (!options || typeof options !== 'object') {\n      throw new Error('sfSocket options should be an object');\n    }\n\n    const constructorOptions = options || {};\n\n    this.config = {\n      ...defaultConfig,\n      ...constructorOptions,\n    };\n\n    this.channels = {};\n    this.eventsDispatcher = new EventsDispatcher();\n\n    this.hasStorage = Boolean(this.config.useStorage && window && window.localStorage);\n\n    this.connection = new ConnectionManager(this.config);\n\n    this.connection.bind(NamesDict.CONNECTED, () => {\n      Object.keys(this.channels).forEach((channelName) => {\n        this.subscribeChannel(channelName);\n      });\n    });\n\n    this.connection.bind(NamesDict.MESSAGE, (event: any) => {\n      this.eventsDispatcher.emit(NamesDict.MESSAGE, event);\n    });\n\n    this.connection.bind(NamesDict.CONNECTING, () => {\n      this.channelsDisconnect();\n    });\n\n    this.connection.bind(NamesDict.DISCONNECTED, () => {\n      this.channelsDisconnect();\n    });\n\n    this.connection.bind(NamesDict.ERROR, (err: ISFSocketEvent) => {\n      console.error(err); // eslint-disable-line no-console\n    });\n\n    SFSocket.instances.push(this);\n\n    if (SFSocket.isReady) {\n      this.connect();\n    }\n\n    if (this.hasStorage) {\n      const activeChannels: string[] = this.getStorage();\n\n      if (activeChannels) {\n        activeChannels.forEach((channelName) => {\n          this.subscribeChannel(channelName);\n        });\n      }\n    }\n  }\n\n  connect() {\n    this.connection.connect();\n  }\n\n  disconnect() {\n    this.connection.disconnect();\n  }\n\n  // connections\n  sendEvent(eventName: string, data: string[], channel?: string) {\n    return this.connection.sendEvent(eventName, data, channel);\n  }\n\n  join(data: string[]) {\n    return this.sendEvent(CONNECTION_EVENTS.JOIN, data);\n  }\n\n  leave(data: string[]) {\n    return this.sendEvent(CONNECTION_EVENTS.LEAVE, data);\n  }\n\n  listen(channelsNames: string[]) {\n    channelsNames.forEach((channelsName) => {\n      if (this.connection.isConnected()) {\n        this.joinChannel(channelsName);\n      } else {\n        this.subscribeChannel(channelsName);\n      }\n    });\n  }\n\n  stopListen(channelNames: string[]) {\n    channelNames.forEach((channelName) => {\n      const removedChannel = this.removeChannel(channelName);\n      if (removedChannel && this.connection.isConnected()) {\n        removedChannel.leaveChannel();\n      }\n    });\n  }\n\n  // TODO: what was that TODO about? Test if works and remove\n  subscribe<K extends keyof ConnectionManagerEventMap>(eventName: K, callback: UEventCallback<ConnectionManagerEventMap, K>, channel?: string) {\n    return this.connection.bind(eventName, callback, channel);\n  }\n\n  // TODO: what was that TODO about? Test if works and remove\n  unsubscribe<K extends keyof ConnectionManagerEventMap>(eventName: K, callback: UEventCallback<ConnectionManagerEventMap, K>, channel?: string) {\n    return this.connection.unbind(eventName, callback, channel);\n  }\n\n  // channels\n  channel(channelName: string): Channel {\n    return this.subscribeChannel(channelName);\n  }\n\n  addChannel(name : string, socket : SFSocket) {\n    if (!this.channels[name]) {\n      this.channels[name] = new Channel(name, socket);\n    }\n    return this.channels[name];\n  }\n\n  joinChannel(chanelName: string) {\n    this.addStorageChannel(chanelName);\n    return this.sendEvent(CONNECTION_EVENTS.JOIN, [chanelName]);\n  }\n\n  leaveChannel(chanelName: string) {\n    this.removeStorageChannel(chanelName);\n    return this.sendEvent(CONNECTION_EVENTS.LEAVE, [chanelName]);\n  }\n\n  findChannel(name: string): Channel {\n    return this.channels[name];\n  }\n\n  private removeChannel(name : string) {\n    const channel = this.channels[name];\n    delete this.channels[name];\n    return channel;\n  }\n\n  private channelsDisconnect() {\n    Object.values(this.channels).forEach((channel: Channel) => channel.disconnect());\n  }\n\n  private subscribeChannel(channelName: string) {\n    const channel = this.addChannel(channelName, this);\n\n    if (channel.subscriptionCancelled) {\n      channel.reinstateSubscription();\n    } else if (this.connection.isConnected()) {\n      channel.join();\n    }\n    return channel;\n  }\n\n  // storage\n  getStorage() {\n    if (this.hasStorage) {\n      const storageData = window.localStorage.getItem(STORAGE_KEY);\n\n      return storageData ? JSON.parse(storageData) : null;\n    }\n\n    return null;\n  }\n\n  addStorageChannel(channelName: string) {\n    if (this.hasStorage) {\n      const activeStorageChannels = this.getStorage();\n\n      if (activeStorageChannels) { // remove older records\n        const activeChannels = activeStorageChannels.filter((channel: string) => channel !== channelName); // eslint-disable-line max-len\n\n        activeChannels.push(channelName);\n\n        this.setStorage(activeChannels);\n      } else {\n        this.setStorage([channelName]);\n      }\n    }\n  }\n\n  removeStorageChannel(channelName: string) {\n    if (this.hasStorage) {\n      const activeStorage = this.getStorage();\n\n      if (activeStorage) {\n        const currentData = activeStorage.filter((channel: string) => channel !== channelName);\n\n        if (currentData.length) {\n          this.setStorage(currentData);\n        } else {\n          this.clearStorage();\n        }\n      }\n    }\n  }\n\n  setStorage(args: string[]) {\n    if (this.hasStorage) {\n      return window.localStorage.setItem(STORAGE_KEY, JSON.stringify(args));\n    }\n\n    return null;\n  }\n\n  clearStorage() {\n    if (this.hasStorage) {\n      return window.localStorage.removeItem(STORAGE_KEY);\n    }\n\n    return null;\n  }\n}\n","import { SFSocket } from './SFSocket';\n\nconst makeSocketOptions = (wsUrl: string) => {\n  const url = new URL(wsUrl);\n  const urlProtocol = url.protocol ? url.protocol.replace(':', '') : null;\n\n  if (url.hostname && url.port && urlProtocol) {\n    return {\n      host: url.hostname, // host: 'localhost',\n      port: url.port, // port: '8080',\n      path: urlProtocol, // path: 'ws',\n    };\n  }\n\n  return null;\n};\n\n\nexport { SFSocket, makeSocketOptions };\nexport default SFSocket;\n"],"sourceRoot":""}