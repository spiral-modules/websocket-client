{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/callbackRegistry.ts","webpack:///./lib/eventsDispatcher.ts","webpack:///./lib/channel.ts","webpack:///./lib/connection.ts","webpack:///./lib/transportConnection.ts","webpack:///./lib/transport.ts","webpack:///./lib/connectionManager.ts","webpack:///./lib/sfSocket.ts","webpack:///./lib/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","prefix","CallbackRegistry","this","callbacks","callback","channel","prefixedEventName","push","fn","names","keys","removeCallback","removeAllCallbacks","forEach","filter","existedCallback","isEqualCallback","isEqualChannel","length","eventName","add","remove","event","channelEvent","context","isChannelCallback","socket","super","subscribed","subscriptionCancelled","data","console","warn","sendEvent","joinChannel","subscribe","unsubscribe","leaveChannel","systemSymbols","id","transport","bindListeners","send","type","error","sfEvent","cmd","args","JSON","stringify","encodeMessage","close","unbindListeners","listeners","unbind","message","closed","messageEvent","sfSocketEvent","messageData","parse","calcChannelName","topic","resultTopic","symbol","String","payload","decodeMessage","e","emit","closeEvent","code","handleCloseEvent","action","prepareCloseAction","hooks","initialize","self","isInitialized","changeState","onClose","state","url","getSocket","setTimeout","onError","onopen","onerror","onclose","onmessage","wasClean","reason","undefined","onOpen","onMessage","params","options","useTLS","host","portTLS","port","path","Boolean","window","WebSocket","socketUrl","Constructor","connected","onInitialized","connect","onClosed","result","abort","connection","usingTLS","errorCallbacks","buildErrorCallbacks","connectionCallbacks","buildConnectionCallbacks","runner","unavailableTimer","retryTimer","updateState","startConnecting","setUnavailableTimer","disconnectInternally","abortConnecting","clearUnavailableTimer","setConnection","clearRetryTimer","abandonConnection","delay","Math","round","clearTimeout","unavailableTimeout","socketEvent","errorEvent","shouldRetry","retryIn","withErrorEmitted","refused","disconnect","unavailable","newState","previousState","CONNECTION_EVENTS","defaultConfig","useStorage","Error","constructorOptions","config","channels","eventsDispatcher","hasStorage","localStorage","channelName","subscribeChannel","channelsDisconnect","err","instances","isReady","activeChannels","getStorage","instance","channelsNames","channelsName","channelNames","removedChannel","removeChannel","chanelName","addStorageChannel","removeStorageChannel","values","addChannel","reinstateSubscription","join","storageData","getItem","activeStorageChannels","setStorage","activeStorage","currentData","clearStorage","setItem","removeItem","makeSocketOptions","wsUrl","URL","urlProtocol","protocol","replace","hostname"],"mappings":"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","file":"socket.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","interface ICallback {\n  fn: Function;\n  channel: string | null;\n}\n\ninterface ICallbackTable {\n  [index: string]: ICallback[];\n}\n\nfunction prefix(name: string): string {\n  return `sf:${name}`;\n}\n\nexport default class CallbackRegistry {\n  callbacks: ICallbackTable;\n\n  constructor() {\n    this.callbacks = {};\n  }\n\n  get(name : string) : ICallback[] {\n    return this.callbacks[prefix(name)];\n  }\n\n  add(name : string, callback : Function, channel?: string) {\n    const prefixedEventName = prefix(name);\n\n    this.callbacks[prefixedEventName] = this.callbacks[prefixedEventName] || [];\n    this.callbacks[prefixedEventName].push({\n      fn: callback,\n      channel: channel || null,\n    });\n  }\n\n  remove(name?: string, callback?: Function, channel?: string) {\n    if (!name && !callback && !channel) {\n      this.callbacks = {};\n      return;\n    }\n\n    const names = name ? [prefix(name)] : Object.keys(this.callbacks);\n\n    if (callback || channel) {\n      this.removeCallback(names, callback, channel);\n    } else {\n      this.removeAllCallbacks(names);\n    }\n  }\n\n  private removeCallback(names : string[], callback? : Function, channel? : string) {\n    names.forEach((name) => {\n      const callbacks = this.callbacks[name] || [];\n\n      this.callbacks[name] = callbacks.filter(\n        (existedCallback: ICallback) => {\n          const isEqualCallback = callback && callback === existedCallback.fn;\n          const isEqualChannel = channel && channel === existedCallback.channel;\n\n          return !isEqualCallback && !isEqualChannel;\n        },\n      );\n      if (this.callbacks[name].length === 0) {\n        delete this.callbacks[name];\n      }\n    });\n  }\n\n  private removeAllCallbacks(names : string[]) {\n    names.forEach((name) => {\n      delete this.callbacks[name];\n    });\n  }\n}\n","import CallbackRegistry from './callbackRegistry';\nimport { ISFSocketEvent } from './sfSocket';\n\n\nexport default class EventsDispatcher {\n  callbacks: CallbackRegistry;\n\n  constructor() {\n    this.callbacks = new CallbackRegistry();\n  }\n\n  bind(eventName : string, callback : Function, channel?: string) {\n    this.callbacks.add(eventName, callback, channel);\n    return this;\n  }\n\n  unbind(eventName : string, callback : Function, channel?: string) {\n    this.callbacks.remove(eventName, callback, channel);\n    return this;\n  }\n\n  emit(eventName : string, event?: ISFSocketEvent) : EventsDispatcher {\n    const callbacks = this.callbacks.get(eventName);\n\n    const channelEvent: string | null | undefined = event && event.context\n      ? event.context.channel\n      : null;\n\n    const hasCallbacks = callbacks && callbacks.length > 0;\n\n    if (hasCallbacks) {\n      callbacks.forEach((callback) => {\n        const isChannelCallback = callback.channel === channelEvent;\n        const isGlobalCallback = !callback.channel || !channelEvent;\n\n        if (isGlobalCallback || isChannelCallback) {\n          callback.fn(event);\n        }\n      });\n    }\n\n    return this;\n  }\n}\n","import EventsDispatcher from './eventsDispatcher';\nimport { SFSocket } from './sfSocket';\n\nexport default class Channel extends EventsDispatcher {\n  name: string;\n\n  socket: SFSocket;\n\n  subscribed: boolean;\n\n  subscriptionCancelled: boolean;\n\n  constructor(name : string, socket: SFSocket) {\n    super();\n\n    this.name = name;\n    this.socket = socket;\n    this.subscribed = false;\n    this.subscriptionCancelled = false;\n  }\n\n  trigger(event : string, data : any) { // TODO\n    if (!this.subscribed) {\n      console.warn('Client event triggered before channel \\'subscription_succeeded\\' event'); // eslint-disable-line no-console\n    }\n    return this.socket.sendEvent(event, data, this.name);\n  }\n\n  disconnect() {\n    this.subscribed = false;\n  }\n\n  join() {\n    if (this.subscribed) return;\n    this.subscriptionCancelled = false;\n    this.subscribed = true;\n    this.socket.joinChannel(this.name);\n  }\n\n  subscribe(eventName: string, data: any) { // TODO\n    this.socket.subscribe(eventName, data, this.name);\n  }\n\n  unsubscribe(eventName: string, data: any) { // TODO\n    this.socket.unsubscribe(eventName, data, this.name);\n  }\n\n  leaveChannel() {\n    this.subscribed = false;\n    this.socket.leaveChannel(this.name);\n  }\n\n  cancelSubscription() {\n    this.subscriptionCancelled = true;\n  }\n\n  reinstateSubscription() {\n    this.subscriptionCancelled = false;\n  }\n}\n","import EventsDispatcher from './eventsDispatcher';\nimport { ISFSocketEvent } from './sfSocket';\nimport TransportConnection from './transportConnection';\n\nconst systemSymbols = ['@'];\n\nexport const decodeMessage = (messageEvent : string) : ISFSocketEvent => {\n  if (messageEvent) {\n    const messageData = JSON.parse(messageEvent);\n\n    const calcChannelName = (topic: string) => {\n      let resultTopic = topic;\n\n      systemSymbols.forEach((symbol) => {\n        if (topic && topic[0] === symbol) {\n          resultTopic = '';\n        }\n      });\n\n      return String(resultTopic);\n    };\n\n    return {\n      type: 'sfSocket:message',\n      error: null,\n      data: messageData.payload || null,\n      context: {\n        ...(messageData.topic ? { channel: calcChannelName(messageData.topic) } : {}),\n      },\n    };\n  }\n\n  return {\n    type: 'MessageParseError',\n    error: `messageEvent: ${messageEvent} not contains data property`,\n    data: null,\n  };\n};\n\nconst encodeMessage = (event : ISFSocketEvent) : string => {\n  const sfEvent = {\n    cmd: event.type,\n    args: event.data,\n  };\n\n  return JSON.stringify(sfEvent);\n};\n\n/**\n * See:\n * 1. https://developer.mozilla.org/en-US/docs/WebSockets/WebSockets_reference/CloseEvent\n */\nconst prepareCloseAction = (closeEvent: ISFSocketEvent) : ISFSocketEvent => {\n  if (!closeEvent.context || !closeEvent.context.code) {\n    console.error('socket event do not contain close code'); // eslint-disable-line no-console\n\n    return {\n      ...closeEvent,\n      error: 'connection refused',\n    };\n  }\n\n  if (closeEvent.context.code < 4000) {\n    // ignore 1000 CLOSE_NORMAL, 1001 CLOSE_GOING_AWAY,\n    //        1005 CLOSE_NO_STATUS, 1006 CLOSE_ABNORMAL\n    // ignore 1007...3999\n    // handle 1002 CLOSE_PROTOCOL_ERROR, 1003 CLOSE_UNSUPPORTED,\n    //        1004 CLOSE_TOO_LARGE\n    if (closeEvent.context.code >= 1002 && closeEvent.context.code <= 1004) {\n      return {\n        ...closeEvent,\n        error: 'socket is unavailable',\n      };\n    }\n  }\n\n  return closeEvent;\n};\n\nexport default class Connection extends EventsDispatcher {\n  id: string;\n\n  transport: TransportConnection | null;\n\n  constructor(id : string, transport : TransportConnection) {\n    super();\n    this.id = id;\n    this.transport = transport;\n    this.bindListeners();\n  }\n\n  send(data : string) : boolean {\n    if (!this.transport) return false;\n    return this.transport.send(data);\n  }\n\n  sendEvent(name : string, data : any, channel?: string) : boolean {\n    const event: ISFSocketEvent = {\n      type: name,\n      data,\n      error: null,\n    };\n\n    if (channel) {\n      event.context = { channel };\n    }\n\n    return this.send(encodeMessage(event));\n  }\n\n  close() {\n    if (this.transport) {\n      this.transport.close();\n    }\n  }\n\n  private bindListeners() {\n    const unbindListeners = (listeners: any) => { // TODO\n      if (!this.transport) return;\n      this.transport.unbind('message', listeners.message);\n      this.transport.unbind('error', listeners.error);\n      this.transport.unbind('closed', listeners.closed);\n    };\n\n    const listeners = {\n      message: (messageEvent: MessageEvent) => {\n        let sfSocketEvent = null;\n        try {\n          sfSocketEvent = decodeMessage(messageEvent.data);\n        } catch (e) {\n          this.emit('error', {\n            type: 'MessageParseError',\n            error: e,\n            data: typeof messageEvent === 'string' ? messageEvent : JSON.stringify(messageEvent),\n          });\n        }\n\n        if (sfSocketEvent) {\n          if (sfSocketEvent.type === 'sfSocket:error') {\n            this.emit('error', {\n              type: 'sfSocket:error',\n              data: sfSocketEvent.data,\n              error: null,\n            });\n          } else {\n            this.emit('message', sfSocketEvent);\n          }\n        }\n      },\n      error: (error: string) => { // TODO\n        this.emit('error', {\n          type: 'sfSocket:error',\n          error,\n          data: null,\n        });\n      },\n      closed: (closeEvent: ISFSocketEvent) => { // TODO\n        unbindListeners(listeners);\n\n        if (closeEvent && closeEvent.context && closeEvent.context.code) {\n          this.handleCloseEvent(closeEvent);\n        }\n\n        this.transport = null;\n        this.emit('closed');\n      },\n    };\n\n    if (!this.transport) return;\n    this.transport.bind('message', listeners.message);\n    this.transport.bind('error', listeners.error);\n    this.transport.bind('closed', listeners.closed);\n  }\n\n  private handleCloseEvent(closeEvent : ISFSocketEvent) {\n    const action = prepareCloseAction(closeEvent);\n\n    if (action.type === 'sfSocket:closed') {\n      this.emit('close', action);\n    } else {\n      this.emit('error', action);\n    }\n  }\n}\n","import EventsDispatcher from './eventsDispatcher';\nimport { ISFSocketConfig, ISFSocketEvent } from './sfSocket';\n\nexport interface TransportHooks {\n  url: string;\n  isInitialized(): boolean;\n  getSocket(url: string, options?: ISFSocketConfig): WebSocket;\n}\n\nexport default class TransportConnection extends EventsDispatcher {\n  hooks: TransportHooks;\n\n  name: string;\n\n  state: string;\n\n  socket?: WebSocket;\n\n  initialize: Function;\n\n  constructor(hooks : TransportHooks, name : string) {\n    super();\n    this.initialize = () => {\n      const self = this;\n\n      if (self.hooks.isInitialized()) {\n        self.changeState('initialized');\n      } else {\n        self.onClose();\n      }\n    };\n    this.hooks = hooks;\n    this.name = name;\n\n    this.state = 'new';\n  }\n\n  connect() : boolean {\n    if (this.socket || this.state !== 'initialized') {\n      return false;\n    }\n\n    const { url } = this.hooks;\n    try {\n      this.socket = this.hooks.getSocket(url);\n    } catch (e) {\n      // Workaround for MobileSafari bug (see https://gist.github.com/2052006)\n      setTimeout(() => {\n        this.onError(e);\n        this.changeState('closed');\n      });\n      return false;\n    }\n\n    this.bindListeners();\n    this.changeState('connecting');\n    return true;\n  }\n\n  /** Closes the connection.\n   *\n   * @return {Boolean} true if there was a connection to close\n   */\n  close() : boolean {\n    if (this.socket) {\n      this.socket.close();\n      return true;\n    }\n    return false;\n  }\n\n  send(data : any) : boolean { // TODO\n    if (this.state === 'open') {\n      // Workaround for MobileSafari bug (see https://gist.github.com/2052006)\n      setTimeout(() => {\n        if (this.socket) {\n          this.socket.send(data);\n        }\n      });\n      return true;\n    }\n    return false;\n  }\n\n  private unbindListeners() {\n    if (!this.socket) return;\n    this.socket.onopen = null;\n    this.socket.onerror = null;\n    this.socket.onclose = null;\n    this.socket.onmessage = null;\n  }\n\n\n  private onOpen() {\n    this.changeState('open');\n    if (!this.socket) return;\n    this.socket.onopen = null;\n  }\n\n  private onError(error?: string) {\n    this.emit('error', {\n      type: 'sfSocket:error',\n      error: error || 'websocket connection error',\n      data: null,\n    });\n  }\n\n  private onClose(closeEvent?: CloseEvent) {\n    if (closeEvent) {\n      this.changeState('closed', {\n        type: closeEvent.wasClean ? 'sfSocket:closed' : 'sfSocket:error',\n        data: closeEvent.wasClean ? closeEvent.reason : null,\n        error: closeEvent.wasClean ? null : closeEvent.reason,\n        context: {\n          code: closeEvent.code,\n        },\n      });\n    } else {\n      this.changeState('closed');\n    }\n    this.unbindListeners();\n    this.socket = undefined;\n  }\n\n  private onMessage(message: MessageEvent) {\n    this.emit('message', {\n      type: 'sfSocket:message',\n      data: typeof message.data === 'string' ? message.data : JSON.stringify(message.data),\n      error: null,\n    });\n  }\n\n  private bindListeners() {\n    if (!this.socket) return;\n    this.socket.onopen = () => {\n      this.onOpen();\n    };\n    this.socket.onerror = () => {\n      this.onError();\n    };\n    this.socket.onclose = (closeEvent: CloseEvent) => {\n      this.onClose(closeEvent);\n    };\n    this.socket.onmessage = (message: MessageEvent) => {\n      this.onMessage(message);\n    };\n  }\n\n  private changeState(state : string, params?: ISFSocketEvent) {\n    this.state = state;\n    this.emit(state, params);\n  }\n}\n","import Connection from './connection';\nimport TransportConnection, { TransportHooks } from './transportConnection';\nimport { ISFSocketConfig } from './sfSocket';\n\nexport interface IRunner {\n  abort: () => void;\n}\n\nexport interface ITransport {\n  connect(callback: Function): IRunner;\n}\n\nexport default class Transport implements ITransport {\n  hooks: TransportHooks;\n\n  name: string;\n\n  options: ISFSocketConfig;\n\n  constructor(name: string, options: ISFSocketConfig) {\n    this.options = options || {};\n\n    const scheme = `ws${options.useTLS ? 's' : ''}`;\n    const host = options.useTLS ? (`${options.host}:${options.portTLS}`) : (`${options.host}:${options.port}`);\n\n    const url = `${scheme}://${host}/${options.path}`;\n\n    this.hooks = {\n      url,\n      isInitialized() {\n        return Boolean(window.WebSocket/* || window.MozWebSocket */);\n      },\n      getSocket(socketUrl) {\n        const Constructor = window.WebSocket/* || window.MozWebSocket */;\n        return new Constructor(socketUrl);\n      },\n    };\n    this.name = name;\n  }\n\n  connect(callback: Function) {\n    let connected = false;\n\n    const transport = new TransportConnection(\n      this.hooks, this.name,\n    );\n\n    const onInitialized = () => {\n      transport.unbind('initialized', onInitialized);\n      transport.connect();\n    };\n\n    const unbindListeners = () => {\n      transport.unbind('initialized', onInitialized);\n      transport.unbind('open', onOpen); // eslint-disable-line no-use-before-define\n      transport.unbind('error', onError); // eslint-disable-line no-use-before-define\n      transport.unbind('closed', onClosed); // eslint-disable-line no-use-before-define\n    };\n\n    const onOpen = () => {\n      connected = true;\n      unbindListeners();\n      const result = new Connection('', transport);\n      callback(null, result);\n    };\n\n    const onError = (error: any) => { // TODO\n      unbindListeners();\n      callback(error);\n    };\n    const onClosed = () => {\n      unbindListeners();\n    };\n\n    transport.bind('initialized', onInitialized);\n    transport.bind('open', onOpen);\n    transport.bind('error', onError);\n    transport.bind('closed', onClosed);\n\n    transport.initialize();\n\n    return {\n      abort: () => {\n        if (connected) {\n          return;\n        }\n        unbindListeners();\n        transport.close();\n      },\n    };\n  }\n}\n","import EventsDispatcher from './eventsDispatcher';\nimport Transport, { IRunner, ITransport } from './transport';\nimport Connection from './connection';\nimport { ISFSocketConfig, ISFSocketEvent } from './sfSocket';\n\ninterface Action {\n  action: string;\n  id?: string;\n  error?: any; // TODO\n}\n\nexport interface ErrorCallbacks {\n  refused: (result: Action) => void;\n  unavailable: (result: Action) => void;\n}\n\nexport interface ConnectionCallbacks {\n  message: (message: any) => void; // TODO\n  error: (error: any) => void; // TODO\n  closed: (reason: any) => void; // TODO\n}\n\nexport default class ConnectionManager extends EventsDispatcher {\n  options: ISFSocketConfig;\n\n  state: string;\n\n  connection: Connection | null;\n\n  usingTLS: boolean;\n\n  unavailableTimer: number;\n\n  retryTimer: number;\n\n  transport: ITransport;\n\n  runner: IRunner | null;\n\n  errorCallbacks: ErrorCallbacks;\n\n  connectionCallbacks: ConnectionCallbacks;\n\n  constructor(options : ISFSocketConfig) {\n    super();\n    this.options = options || {};\n    this.state = 'initialized';\n    this.connection = null;\n    this.usingTLS = Boolean(options.useTLS);\n\n    this.errorCallbacks = this.buildErrorCallbacks();\n    this.connectionCallbacks = this.buildConnectionCallbacks(this.errorCallbacks);\n\n    this.transport = new Transport(\n      'ws',\n      options,\n    );\n    this.runner = null;\n\n    this.unavailableTimer = 0;\n    this.retryTimer = 0;\n  }\n\n  connect() {\n    if (this.connection || this.runner) {\n      return;\n    }\n    this.updateState('connecting');\n    this.startConnecting();\n    this.setUnavailableTimer();\n  }\n\n  send(data: string) {\n    if (this.connection) {\n      return this.connection.send(data);\n    }\n    return false;\n  }\n\n  sendEvent(name : string, data : string[], channel?: string) {\n    if (this.connection) {\n      return this.connection.sendEvent(name, data, channel);\n    }\n    return false;\n  }\n\n  disconnect() {\n    this.disconnectInternally();\n    this.updateState('disconnected');\n  }\n\n  private startConnecting() {\n    const callback = (error: any, connection: Connection) => { // TODO\n      if (error) {\n        this.runner = this.transport.connect(callback);\n      } else {\n        this.abortConnecting();\n\n        this.clearUnavailableTimer();\n        this.setConnection(connection);\n        this.updateState('connected');\n      }\n    };\n    this.runner = this.transport.connect(callback);\n  }\n\n  private abortConnecting() {\n    if (this.runner) {\n      this.runner.abort();\n      this.runner = null;\n    }\n  }\n\n  private disconnectInternally() {\n    this.abortConnecting();\n    this.clearRetryTimer();\n    this.clearUnavailableTimer();\n    if (this.connection) {\n      const connection = this.abandonConnection();\n      if (connection) connection.close();\n    }\n  }\n\n  private retryIn(delay: number) {\n    if (delay > 0) {\n      this.emit('connecting', {\n        type: 'sfSocket:connecting',\n        data: String(Math.round(delay / 1000)),\n        error: null,\n      });\n    }\n    this.retryTimer = setTimeout(() => {\n      this.disconnectInternally();\n      this.connect();\n    }, delay || 0);\n  }\n\n  private clearRetryTimer() {\n    if (this.retryTimer) {\n      if (this.retryTimer) {\n        clearTimeout(this.retryTimer);\n      }\n      this.retryTimer = 0;\n    }\n  }\n\n  private setUnavailableTimer() {\n    this.unavailableTimer = setTimeout(\n      () => {\n        this.updateState('unavailable');\n      },\n      this.options.unavailableTimeout,\n    );\n  }\n\n  private clearUnavailableTimer() {\n    if (this.unavailableTimer) {\n      clearTimeout(this.unavailableTimer);\n    }\n    this.unavailableTimer = 0;\n  }\n\n  private buildConnectionCallbacks(errorCallbacks: ErrorCallbacks) : ConnectionCallbacks {\n    return {\n      ...errorCallbacks,\n      message: (socketEvent: ISFSocketEvent) => {\n      // includes pong messages from server\n        this.emit('message', socketEvent);\n      },\n      error: (errorEvent: ISFSocketEvent) => {\n      // just emit error to user - socket will already be closed by browser\n        this.emit('error', errorEvent);\n      },\n      closed: (closeEvent: ISFSocketEvent) => {\n        this.abandonConnection();\n        if (this.shouldRetry()) {\n          this.retryIn(1000);\n        }\n        this.emit('closed', closeEvent);\n      },\n    };\n  }\n\n  private buildErrorCallbacks() : ErrorCallbacks {\n    const withErrorEmitted = (callback: Function) => (result: Action) => {\n      if (result.error) {\n        this.emit('error', {\n          type: 'sfSocket:error',\n          data: null,\n          error: result.error,\n        });\n      }\n      callback(result);\n    };\n\n    return {\n      refused: withErrorEmitted(() => {\n        this.disconnect();\n      }),\n      unavailable: withErrorEmitted(() => {\n        this.retryIn(1000);\n      }),\n    };\n  }\n\n  private setConnection(connection: Connection | null) {\n    this.connection = connection;\n    if (!this.connection) {\n      return;\n    }\n    this.connection.bind('message', this.connectionCallbacks.message);\n    this.connection.bind('error', this.connectionCallbacks.error);\n    this.connection.bind('closed', this.connectionCallbacks.closed);\n  }\n\n  private abandonConnection() {\n    if (!this.connection) {\n      return null;\n    }\n    this.connection.unbind('message', this.connectionCallbacks.message);\n    this.connection.unbind('error', this.connectionCallbacks.error);\n    this.connection.unbind('closed', this.connectionCallbacks.closed);\n\n    const { connection } = this;\n    this.connection = null;\n\n    return connection;\n  }\n\n  private updateState(newState : string) {\n    const previousState = this.state;\n    this.state = newState;\n    if (previousState !== newState) {\n      this.emit(newState);\n    }\n  }\n\n  private shouldRetry() : boolean {\n    return this.state === 'connecting' || this.state === 'connected';\n  }\n}\n","import Channel from './channel';\nimport EventsDispatcher from './eventsDispatcher';\nimport ConnectionManager from './connectionManager';\n\nconst STORAGE_KEY = 'sfsocket_storage';\n\n\nconst CONNECTION_EVENTS = {\n  JOIN: 'join',\n  LEAVE: 'leave',\n};\n\n\nexport interface IChannels {\n  [name: string]: Channel;\n}\n\n\nexport interface ISFSocketConfig {\n  host: string,\n  port: string | number;\n  portTLS?: string | number;\n  path: string;\n  unavailableTimeout?: number;\n  useTLS?: boolean;\n  useStorage?: boolean;\n}\n\nexport interface ISFSocketEvent {\n  type: string,\n  data: string | null,\n  error: string | null,\n  context?: {\n    channel?: string,\n    code?: string | number,\n  } | null\n}\n\nconst defaultConfig: ISFSocketConfig = {\n  host: '',\n  port: 80,\n  portTLS: 443,\n  path: '',\n  unavailableTimeout: 10000,\n  useTLS: false,\n  useStorage: false,\n};\n\nexport class SFSocket {\n  static instances: SFSocket[] = [];\n\n  static isReady: boolean = false;\n\n  static ready() {\n    SFSocket.isReady = true;\n\n    SFSocket.instances.forEach((instance) => {\n      instance.connect();\n    });\n  }\n\n  config: ISFSocketConfig;\n\n  channels: IChannels;\n\n  eventsDispatcher: EventsDispatcher;\n\n  connection: ConnectionManager;\n\n  hasStorage: boolean;\n\n  constructor(options?: ISFSocketConfig) {\n    if (!options || typeof options !== 'object') {\n      throw new Error('sfSocket options should be an object');\n    }\n\n    const constructorOptions = options || {};\n\n    this.config = {\n      ...defaultConfig,\n      ...constructorOptions,\n    };\n\n    this.channels = {};\n    this.eventsDispatcher = new EventsDispatcher();\n\n    this.hasStorage = Boolean(this.config.useStorage && window && window.localStorage);\n\n    this.connection = new ConnectionManager(this.config);\n\n    this.connection.bind('connected', () => {\n      Object.keys(this.channels).forEach((channelName) => {\n        this.subscribeChannel(channelName);\n      });\n    });\n\n    this.connection.bind('message', (event: any) => {\n      this.eventsDispatcher.emit('message', event);\n    });\n\n    this.connection.bind('connecting', () => {\n      this.channelsDisconnect();\n    });\n\n    this.connection.bind('disconnected', () => {\n      this.channelsDisconnect();\n    });\n\n    this.connection.bind('error', (err: Error) => {\n      console.error(err); // eslint-disable-line no-console\n    });\n\n    SFSocket.instances.push(this);\n\n    if (SFSocket.isReady) {\n      this.connect();\n    }\n\n    if (this.hasStorage) {\n      const activeChannels: string[] = this.getStorage();\n\n      if (activeChannels) {\n        activeChannels.forEach((channelName) => {\n          this.subscribeChannel(channelName);\n        });\n      }\n    }\n  }\n\n  connect() {\n    this.connection.connect();\n  }\n\n  disconnect() {\n    this.connection.disconnect();\n  }\n\n  // connections\n  sendEvent(eventName: string, data: string[], channel?: string) {\n    return this.connection.sendEvent(eventName, data, channel);\n  }\n\n  join(data: string[]) {\n    return this.sendEvent(CONNECTION_EVENTS.JOIN, data);\n  }\n\n  leave(data: string[]) {\n    return this.sendEvent(CONNECTION_EVENTS.LEAVE, data);\n  }\n\n  listen(channelsNames: string[]) {\n    channelsNames.forEach((channelsName) => {\n      if (this.connection.state === 'connected') {\n        this.joinChannel(channelsName);\n      } else {\n        this.subscribeChannel(channelsName);\n      }\n    });\n  }\n\n  stopListen(channelNames: string[]) {\n    channelNames.forEach((channelName) => {\n      const removedChannel = this.removeChannel(channelName);\n      if (removedChannel && this.connection.state === 'connected') {\n        removedChannel.leaveChannel();\n      }\n    });\n  }\n\n  subscribe(eventName: string, data: any, channel?: string) { // TODO\n    return this.connection.bind(eventName, data, channel);\n  }\n\n  unsubscribe(eventName: string, data: any, channel?: string) { // TODO\n    return this.connection.unbind(eventName, data, channel);\n  }\n\n  // channels\n  channel(channelName: string): Channel {\n    return this.subscribeChannel(channelName);\n  }\n\n  addChannel(name : string, socket : SFSocket) {\n    if (!this.channels[name]) {\n      this.channels[name] = new Channel(name, socket);\n    }\n    return this.channels[name];\n  }\n\n  joinChannel(chanelName: string) {\n    this.addStorageChannel(chanelName);\n    return this.sendEvent(CONNECTION_EVENTS.JOIN, [chanelName]);\n  }\n\n  leaveChannel(chanelName: string) {\n    this.removeStorageChannel(chanelName);\n    return this.sendEvent(CONNECTION_EVENTS.LEAVE, [chanelName]);\n  }\n\n  findChannel(name: string): Channel {\n    return this.channels[name];\n  }\n\n  private removeChannel(name : string) {\n    const channel = this.channels[name];\n    delete this.channels[name];\n    return channel;\n  }\n\n  private channelsDisconnect() {\n    Object.values(this.channels).forEach((channel: Channel) => channel.disconnect());\n  }\n\n  private subscribeChannel(channelName: string) {\n    const channel = this.addChannel(channelName, this);\n\n    if (channel.subscriptionCancelled) {\n      channel.reinstateSubscription();\n    } else if (this.connection.state === 'connected') {\n      channel.join();\n    }\n    return channel;\n  }\n\n  // storage\n  getStorage() {\n    if (this.hasStorage) {\n      const storageData = window.localStorage.getItem(STORAGE_KEY);\n\n      return storageData ? JSON.parse(storageData) : null;\n    }\n\n    return null;\n  }\n\n  addStorageChannel(channelName: string) {\n    if (this.hasStorage) {\n      const activeStorageChannels = this.getStorage();\n\n      if (activeStorageChannels) { // remove older records\n        const activeChannels = activeStorageChannels.filter((channel: string) => channel !== channelName); // eslint-disable-line max-len\n\n        activeChannels.push(channelName);\n\n        this.setStorage(activeChannels);\n      } else {\n        this.setStorage([channelName]);\n      }\n    }\n  }\n\n  removeStorageChannel(channelName: string) {\n    if (this.hasStorage) {\n      const activeStorage = this.getStorage();\n\n      if (activeStorage) {\n        const currentData = activeStorage.filter((channel: string) => channel !== channelName);\n\n        if (currentData.length) {\n          this.setStorage(currentData);\n        } else {\n          this.clearStorage();\n        }\n      }\n    }\n  }\n\n  setStorage(args: string[]) {\n    if (this.hasStorage) {\n      return window.localStorage.setItem(STORAGE_KEY, JSON.stringify(args));\n    }\n\n    return null;\n  }\n\n  clearStorage() {\n    if (this.hasStorage) {\n      return window.localStorage.removeItem(STORAGE_KEY);\n    }\n\n    return null;\n  }\n}\n","import { SFSocket } from './sfSocket';\n\nconst makeSocketOptions = (wsUrl: string) => {\n  const url = new URL(wsUrl);\n  const urlProtocol = url.protocol ? url.protocol.replace(':', '') : null;\n\n  if (url.hostname && url.port && urlProtocol) {\n    return {\n      host: url.hostname, // host: 'localhost',\n      port: url.port, // port: '8080',\n      path: urlProtocol, // path: 'ws',\n    };\n  }\n\n  return null;\n};\n\n\nexport { SFSocket, makeSocketOptions };\nexport default SFSocket;\n"],"sourceRoot":""}